#return(results)
results <- readRDS("testing/detrended_temp_data_Wtadjust_nperm_10.rds")
#return(results)
results <- readRDS("detrended_temp_data_Wtadjust_nperm_10.rds")
#return(results)
results <- readRDS("detrended_temp_data_Wtadjust_nperm_100.rds")
View(results)
#return(results)
results <- readRDS("detrended_temp_data_Wtadjust_nperm_10.rds")
q_results <- lapply(results, function(x) x[[1]]) %>%
do.call(rbind, .)
library(magrittr)
q_results <- lapply(results, function(x) x[[1]]) %>%
do.call(rbind, .)
View(q_results)
# extract all perm_results and combine in list
perm_results <- lapply(results, function(x) x[[2]])
View(perm_results)
# extract all perm_results and combine in list
perm_results <- lapply(results, function(x) x[2])
View(perm_results)
View(perm_results)
# extract all perm_results and combine in list
perm_results <- apply(results, function(x) x[[2])
# get empirical distribution of maxT_all and stcs
dis_maxT_all <- ecdf(q_results[,4])
dis_stcs<- ecdf(q_results[,2])
wt <- vector(length = nperm)
for(i in 1:nperm){
clust_perm <- perm_results[[i]]
w_tmp <- vector(length = length(clust_perm$cluster.count))
#cat("Number of cluster: ", length(clust_perm$cluster.count))
for(j in 1:length(clust_perm$cluster.count)){
# retrieve p-values for each cluster
p_maxT_all <- 1 - dis_maxT_all(clust_perm$cluster.max[j]) - 1/nperm
p_stcs <- 1 - dis_stcs(clust_perm$cluster.count[j]) - 1/nperm
# combine in new test statistic
w <- 1 - min(log(p_maxT_all), log(p_stcs)) # if p-values are zero this will produce infinte/invalid results and assign 0...
if (is.finite(w)){
w_tmp[j] <- w
} else{
w_tmp[j] <- 0
}
}
# get max test statistic value for each permutation
wt[i] <- max(w_tmp, na.rm = TRUE)
}
# cat("finished!\n\n")
# return(list(maxT = results[,1], stcs = results[,2], stcs_maxT = results[,3], wt = wt, original_wt = w_tmp))
}
# extract all perm_results and combine in list
perm_results <- apply(results, function(x) x[[2]])
# extract all perm_results and combine in list
perm_results <- sapply(results, function(x) x[[2]])
View(perm_results)
# get empirical distribution of maxT_all and stcs
dis_maxT_all <- ecdf(q_results[,4])
dis_stcs<- ecdf(q_results[,2])
wt <- vector(length = nperm)
nperm = 10
wt <- vector(length = nperm)
for(i in 1:nperm){
clust_perm <- perm_results[[i]]
w_tmp <- vector(length = length(clust_perm$cluster.count))
#cat("Number of cluster: ", length(clust_perm$cluster.count))
for(j in 1:length(clust_perm$cluster.count)){
# retrieve p-values for each cluster
p_maxT_all <- 1 - dis_maxT_all(clust_perm$cluster.max[j]) - 1/nperm
p_stcs <- 1 - dis_stcs(clust_perm$cluster.count[j]) - 1/nperm
# combine in new test statistic
w <- 1 - min(log(p_maxT_all), log(p_stcs)) # if p-values are zero this will produce infinte/invalid results and assign 0...
if (is.finite(w)){
w_tmp[j] <- w
} else{
w_tmp[j] <- 0
}
}
# get max test statistic value for each permutation
wt[i] <- max(w_tmp, na.rm = TRUE)
}
for(i in 1:nperm){
clust_perm <- perm_results[[i]]
w_tmp <- vector(length = length(clust_perm$cluster.count))
#cat("Number of cluster: ", length(clust_perm$cluster.count))
for(j in 1:length(clust_perm$cluster.count)){
# retrieve p-values for each cluster
p_maxT_all <- 1 - dis_maxT_all(clust_perm$cluster.max[j]) - 1/nperm
cat("j p_maxT_all: ", p_maxT_all)
p_stcs <- 1 - dis_stcs(clust_perm$cluster.count[j]) - 1/nperm
cat("j p_stcs: ", p_stcs)
# combine in new test statistic
w <- 1 - min(log(p_maxT_all), log(p_stcs)) # if p-values are zero this will produce infinte/invalid results and assign 0...
if (is.finite(w)){
w_tmp[j] <- w
} else{
w_tmp[j] <- 0
}
}
# get max test statistic value for each permutation
wt[i] <- max(w_tmp, na.rm = TRUE)
}
wt
# get empirical distribution of maxT_all and stcs
dis_maxT_all <- sort(q_results[,4])
dis_stcs<- sort(q_results[,2])
dis_maxT_all
clust_perm <- perm_results[[3]]
clust_perm$cluster.max
# get empirical distribution of maxT_all and stcs
dis_maxT_all <- ecdf(q_results[,4])
dis_stcs<- ecdf(q_results[,2])
wt <- vector(length = nperm)
for(i in 1:nperm){
clust_perm <- perm_results[[i]]
w_tmp <- vector(length = length(clust_perm$cluster.count))
#cat("Number of cluster: ", length(clust_perm$cluster.count))
for(j in 1:length(clust_perm$cluster.count)){
# retrieve p-values for each cluster
p_maxT_all <- 1 - dis_maxT_all(clust_perm$cluster.max[j]) - 1/nperm
cat("j p_maxT_all: ", p_maxT_all)
p_stcs <- 1 - dis_stcs(clust_perm$cluster.count[j]) - 1/nperm
cat("j p_stcs: ", p_stcs)
# combine in new test statistic
w <- 1 - min(log(p_maxT_all), log(p_stcs)) # if p-values are zero this will produce infinte/invalid results and assign 0...
if (is.finite(w)){
w_tmp[j] <- w
} else{
w_tmp[j] <- 0
}
}
# get max test statistic value for each permutation
wt[i] <- max(w_tmp, na.rm = TRUE)
}
list(maxT = results[,1], stcs = results[,2], stcs_maxT = results[,3], wt = wt, original_wt = w_tmp)
list(maxT = q_results[,1], stcs = q_results[,2], stcs_maxT = q_results[,3], wt = wt, original_wt = w_tmp)
# extract all perm_results and combine in list
perm_results <- sapply(results, function(x) x[[2]])
# get empirical distribution of maxT_all and stcs
dis_maxT_all <- ecdf(q_results[,4])
dis_stcs<- ecdf(q_results[,2])
wt <- vector(length = nperm)
for(i in 1:nperm){
clust_perm <- perm_results[[i]]
w_tmp <- vector(length = length(clust_perm$cluster.count))
#cat("Number of cluster: ", length(clust_perm$cluster.count))
for(j in 1:length(clust_perm$cluster.count)){
# retrieve p-values for each cluster
p_maxT_all <- 1 - dis_maxT_all(clust_perm$cluster.max[j]) - 1/nperm
p_stcs <- 1 - dis_stcs(clust_perm$cluster.count[j]) - 1/nperm
# combine in new test statistic
w <- 1 - min(log(p_maxT_all), log(p_stcs)) # if p-values are zero this will produce infinte/invalid results and assign 0...
if (is.finite(w)){
w_tmp[j] <- w
} else{
w_tmp[j] <- 0
}
}
# get max test statistic value for each permutation
wt[i] <- max(w_tmp, na.rm = TRUE)
}
View(clust_perm)
View(perm_results)
results <- readRDS("detrended_temp_data_Wtadjust_nperm_100.rds")
View(results)
results$maxT
results$stcs_maxT
results$wt
View(results)
results$wt
View(results)
#results <- readRDS("testing/detrended_temp_data_Wtadjust_nperm_100.rds")
results <- readRDS("detrended_temp_data_Wtadjust_nperm_100.rds")
View(results)
results$maxT
results$stcs
results$stcs_maxT
#results <- readRDS("testing/detrended_temp_data_Wtadjust_nperm_100.rds")
results <- readRDS("detrended_temp_data_Wtadjust_nperm_1000.rds")
View(results)
sim_length<- 1000
bootstrap_sample<- 100
fpr_length<- 100
alpha<- 0.05
fpr_sim_stcs<- vector(length = sim_length)
fpr_sim_maxt<- vector(length = sim_length)
fpr_sim_wt <- vector(length = sim_length)
for(j in 1:sim_length){
fpr_stcs<- vector(length = fpr_length)
fpr_maxt<- vector(length = fpr_length)
fpr_wt<- vector(length = fpr_length)
for (i in 1:fpr_length){
ind<- sample(x = length(perm_results$maxT), size = bootstrap_sample, replace = TRUE)
tmp_stcs<- perm_results$stcs[ind]
tmp_maxt<- perm_results$maxT[ind]
tmp_wt<- perm_results$wt[ind]
# gets the threshold for the current sample
q_thr_stcs<- quantile(tmp_stcs, probs = 1-alpha, names = FALSE)
q_thr_maxt<- quantile(tmp_maxt, probs = 1-alpha, names = FALSE)
q_thr_wt<- quantile(tmp_wt, probs = 1-alpha, names = FALSE)
# retrieve false positives, i.e. values above current sample based threshold
fpr_stcs[i]<- tmp_stcs[length(tmp_stcs)] > q_thr_stcs
fpr_maxt[i]<- tmp_maxt[length(tmp_maxt)] > q_thr_maxt
fpr_wt[i] <- tmp_wt[length(tmp_wt)] > q_thr_wt
}
fpr_sim_stcs[j]<- sum(fpr_stcs)/length(fpr_stcs)
fpr_sim_maxt[j]<- sum(fpr_maxt)/length(fpr_maxt)
fpr_sim_wt[j]<- sum(fpr_wt)/length(fpr_wt)
}
#results <- readRDS("testing/detrended_temp_data_Wtadjust_nperm_100.rds")
perm_results <- readRDS("detrended_temp_data_Wtadjust_nperm_1000.rds")
fpr_sim_stcs<- vector(length = sim_length)
fpr_sim_maxt<- vector(length = sim_length)
fpr_sim_wt <- vector(length = sim_length)
for(j in 1:sim_length){
fpr_stcs<- vector(length = fpr_length)
fpr_maxt<- vector(length = fpr_length)
fpr_wt<- vector(length = fpr_length)
for (i in 1:fpr_length){
ind<- sample(x = length(perm_results$maxT), size = bootstrap_sample, replace = TRUE)
tmp_stcs<- perm_results$stcs[ind]
tmp_maxt<- perm_results$maxT[ind]
tmp_wt<- perm_results$wt[ind]
# gets the threshold for the current sample
q_thr_stcs<- quantile(tmp_stcs, probs = 1-alpha, names = FALSE)
q_thr_maxt<- quantile(tmp_maxt, probs = 1-alpha, names = FALSE)
q_thr_wt<- quantile(tmp_wt, probs = 1-alpha, names = FALSE)
# retrieve false positives, i.e. values above current sample based threshold
fpr_stcs[i]<- tmp_stcs[length(tmp_stcs)] > q_thr_stcs
fpr_maxt[i]<- tmp_maxt[length(tmp_maxt)] > q_thr_maxt
fpr_wt[i] <- tmp_wt[length(tmp_wt)] > q_thr_wt
}
fpr_sim_stcs[j]<- sum(fpr_stcs)/length(fpr_stcs)
fpr_sim_maxt[j]<- sum(fpr_maxt)/length(fpr_maxt)
fpr_sim_wt[j]<- sum(fpr_wt)/length(fpr_wt)
}
par(mfrow = c(1, 3))
hist(fpr_sim_stcs)
hist(fpr_sim_maxt)
hist(fpr_sim_wt)
par(mfrow = c(1, 1))
summary(fpr_sim_stcs)
summary(fpr_sim_maxt)
summary(fpr_sim_wt)
load("/home/jose/LAI/data/CHEN_RANGA/AVHRR/yearly_mean/lai_data.RData")
res <- readRDS("nr_clusters.rds")
View(res)
perm_results <- readRDS("testing/LAI_Wtadjust_nperm_3.rds")
perm_results <- readRDS("LAI_Wtadjust_nperm_3.rds")
View(perm_results)
