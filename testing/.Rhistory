}
change_meanvar <- function(n1, n2, sd1, sd2, mean1, mean2, title, omitx=FALSE, omit_title=FALSE) {
change <- c(rnorm(n=n1, mean=mean1, sd=sd1), rnorm(n=n2, mean=mean2, sd=sd2))
if(omitx){
plot(change, type ="l", xlab = "", ylab = "y", main = title)
} else {
plot(change, type ="l", xlab = "Time", ylab = "y", main = title)
}
plot_lines(n1, n2, sd1, sd2, mean1, mean2)
d <- ts(change, frequency=1, start=c(0,1))
proc <- efp(d ~ 1, d, type = "Rec-CUSUM", rescale = TRUE)
if (omitx & omit_title){
plot(proc, main = "" ,xlab = "")
} else if(omitx){
plot(proc, xlab = "")
} else if (omit_title) {
plot(proc, main = "")
} else {
plot(proc)
}
res <- sctest(proc)
p <- round(res$p.value, 3)
text(30, max(c(0.9*max(proc$process), 2.5)), paste0("p-value = ",p), cex = 1)
}
change_pos_meanvar <- function(n1, n2){
par(mfrow = c(3, 2))
# change in mean
change_meanvar(n1, n2, 1.5, 1.5, -1, 5, "Change in mean", omitx = TRUE)
# change in variance
change_meanvar(n1, n2, 1.5, 5, 0, 0, "Change in variance", omitx = TRUE, omit_title = TRUE)
# change in mean and variance
change_meanvar(n1, n2, 3, 1, 4, 0, "Change in mean and variance", omit_title = TRUE)
par(mfrow = c(1,1))
}
plot_slopes <- function(n1, n2, i1, i2, slope1, slope2){
segments(x0 = 0, y0 = i1, x1 = n1, y1 = n1*slope1+i1, col = "black")
segments(x0 = 0, y0 = i1 + 50, x1 = n1, y1 = n1*slope1+i1+50, col = "black", lty="dotted")
segments(x0 = 0, y0 = i1 - 50, x1 = n1, y1 = n1*slope1+i1-50, col = "black", lty="dotted")
segments(x0 = n1+1, y0 = i2, x1 = n1+n2, y1 = (n2+n1)*slope2+i2, col = "black")
segments(x0 = n1+1, y0 = i2+50, x1 = n1+n2, y1 = (n2+n1)*slope2+i2+50, col = "black", lty="dotted")
segments(x0 = n1+1, y0 = i2-50, x1 = n1+n2, y1 = (n2+n1)*slope2+i2-50, col = "black", lty="dotted")
}
change_intertrend <- function(n1, n2, i1, i2, slope1, slope2, title, omitx=FALSE, omit_title=FALSE){
change <- c((slope1*c(1:n1) + i1 + rnorm(n=n1, mean=0, sd=50)), (slope2*c(1:n2) + i2 + rnorm(n=n2, mean=0, sd=50)))
if(omitx){
plot(change, type ="l", xlab = "", ylab = "y", main = title)
} else {
plot(change, type ="l", xlab = "Time", ylab = "y", main = title)
}
plot_slopes(n1, n2, i1, i2, slope1, slope2)
d <- ts(change, frequency=1, start=c(0,1))
proc <- efp(d ~ 1, d, type = "Rec-CUSUM", rescale = TRUE)
if (omitx & omit_title){
plot(proc, main = "" ,xlab = "")
} else if(omitx){
plot(proc, xlab = "")
} else if (omit_title) {
plot(proc, main = "")
} else {
plot(proc)
}
res <- sctest(proc)
p <- round(res$p.value, 3)
text(30, max(c(0.9*max(proc$process), 2.5)), paste0("p-value = ",p), cex = 1)
}
change_pos_intertrend <- function(n1, n2){
par(mfrow = c(3, 2))
# change in mean
change_intertrend(n1, n2, 50, 10, 5, 5, "Change in intercept", omitx = TRUE)
# change in variance
change_intertrend(n1, n2, 5, 5, -2, 4, "Change in trend", omitx = TRUE, omit_title = TRUE)
# change in mean and variance
change_intertrend(n1, n2, 30, 1, 4, 2, "Change in intercept and trend", omit_title = TRUE)
par(mfrow = c(1,1))
}
change_pos_intertrend(120, 120)
plot_slopes <- function(n1, n2, i1, i2, slope1, slope2){
segments(x0 = 0, y0 = i1, x1 = n1, y1 = n1*slope1+i1, col = "black")
segments(x0 = 0, y0 = i1 + 50, x1 = n1, y1 = n1*slope1+i1+50, col = "black", lty="dotted")
segments(x0 = 0, y0 = i1 - 50, x1 = n1, y1 = n1*slope1+i1-50, col = "black", lty="dotted")
segments(x0 = n1+1, y0 = i2, x1 = n1+n2, y1 = (n2+n1)*slope2, col = "black")
segments(x0 = n1+1, y0 = i2+50, x1 = n1+n2, y1 = (n2+n1)*slope2+50, col = "black", lty="dotted")
segments(x0 = n1+1, y0 = i2-50, x1 = n1+n2, y1 = (n2+n1)*slope2-50, col = "black", lty="dotted")
}
change_intertrend <- function(n1, n2, i1, i2, slope1, slope2, title, omitx=FALSE, omit_title=FALSE){
change <- c((slope1*c(1:n1) + i1 + rnorm(n=n1, mean=0, sd=50)), (slope2*c(1:n2) + i2 + rnorm(n=n2, mean=0, sd=50)))
if(omitx){
plot(change, type ="l", xlab = "", ylab = "y", main = title)
} else {
plot(change, type ="l", xlab = "Time", ylab = "y", main = title)
}
plot_slopes(n1, n2, i1, i2, slope1, slope2)
d <- ts(change, frequency=1, start=c(0,1))
proc <- efp(d ~ 1, d, type = "Rec-CUSUM", rescale = TRUE)
if (omitx & omit_title){
plot(proc, main = "" ,xlab = "")
} else if(omitx){
plot(proc, xlab = "")
} else if (omit_title) {
plot(proc, main = "")
} else {
plot(proc)
}
res <- sctest(proc)
p <- round(res$p.value, 3)
text(30, max(c(0.9*max(proc$process), 2.5)), paste0("p-value = ",p), cex = 1)
}
change_pos_intertrend <- function(n1, n2){
par(mfrow = c(3, 2))
# change in mean
change_intertrend(n1, n2, 50, 10, 5, 5, "Change in intercept", omitx = TRUE)
# change in variance
change_intertrend(n1, n2, 5, 5, -2, 4, "Change in trend", omitx = TRUE, omit_title = TRUE)
# change in mean and variance
change_intertrend(n1, n2, 30, 1, 4, 2, "Change in intercept and trend", omit_title = TRUE)
par(mfrow = c(1,1))
}
change_pos_intertrend(120, 120)
plot_slopes <- function(n1, n2, i1, i2, slope1, slope2){
segments(x0 = 0, y0 = i1, x1 = n1, y1 = n1*slope1+i1, col = "black")
segments(x0 = 0, y0 = i1 + 50, x1 = n1, y1 = n1*slope1+i1+50, col = "black", lty="dotted")
segments(x0 = 0, y0 = i1 - 50, x1 = n1, y1 = n1*slope1+i1-50, col = "black", lty="dotted")
segments(x0 = n1+1, y0 = i2, x1 = n1+n2, y1 = (n2)*slope2, col = "black")
segments(x0 = n1+1, y0 = i2+50, x1 = n1+n2, y1 = (n2)*slope2+50, col = "black", lty="dotted")
segments(x0 = n1+1, y0 = i2-50, x1 = n1+n2, y1 = (n2)*slope2-50, col = "black", lty="dotted")
}
change_intertrend <- function(n1, n2, i1, i2, slope1, slope2, title, omitx=FALSE, omit_title=FALSE){
change <- c((slope1*c(1:n1) + i1 + rnorm(n=n1, mean=0, sd=50)), (slope2*c(1:n2) + i2 + rnorm(n=n2, mean=0, sd=50)))
if(omitx){
plot(change, type ="l", xlab = "", ylab = "y", main = title)
} else {
plot(change, type ="l", xlab = "Time", ylab = "y", main = title)
}
plot_slopes(n1, n2, i1, i2, slope1, slope2)
d <- ts(change, frequency=1, start=c(0,1))
proc <- efp(d ~ 1, d, type = "Rec-CUSUM", rescale = TRUE)
if (omitx & omit_title){
plot(proc, main = "" ,xlab = "")
} else if(omitx){
plot(proc, xlab = "")
} else if (omit_title) {
plot(proc, main = "")
} else {
plot(proc)
}
res <- sctest(proc)
p <- round(res$p.value, 3)
text(30, max(c(0.9*max(proc$process), 2.5)), paste0("p-value = ",p), cex = 1)
}
change_pos_intertrend <- function(n1, n2){
par(mfrow = c(3, 2))
# change in mean
change_intertrend(n1, n2, 50, 10, 5, 5, "Change in intercept", omitx = TRUE)
# change in variance
change_intertrend(n1, n2, 5, 5, -2, 4, "Change in trend", omitx = TRUE, omit_title = TRUE)
# change in mean and variance
change_intertrend(n1, n2, 30, 1, 4, 2, "Change in intercept and trend", omit_title = TRUE)
par(mfrow = c(1,1))
}
change_pos_intertrend(120, 120)
change_pos_intertrend(20, 220)
change_pos_intertrend(220, 20) # harder to detect
change_pos_intertrend(60, 180)
change_pos_intertrend(220, 20) # harder to detect
change_pos_intertrend(60, 180)
change_pos_intertrend(180, 60)
plot_slopes <- function(n1, n2, i1, i2, slope1, slope2){
segments(x0 = 0, y0 = i1, x1 = n1, y1 = n1*slope1+i1, col = "black")
segments(x0 = 0, y0 = i1 + 50, x1 = n1, y1 = n1*slope1+i1+100, col = "black", lty="dotted")
segments(x0 = 0, y0 = i1 - 50, x1 = n1, y1 = n1*slope1+i1-100, col = "black", lty="dotted")
segments(x0 = n1+1, y0 = i2, x1 = n1+n2, y1 = (n2)*slope2, col = "black")
segments(x0 = n1+1, y0 = i2+50, x1 = n1+n2, y1 = (n2)*slope2+100, col = "black", lty="dotted")
segments(x0 = n1+1, y0 = i2-50, x1 = n1+n2, y1 = (n2)*slope2-100, col = "black", lty="dotted")
}
change_intertrend <- function(n1, n2, i1, i2, slope1, slope2, title, omitx=FALSE, omit_title=FALSE){
change <- c((slope1*c(1:n1) + i1 + rnorm(n=n1, mean=0, sd=100)), (slope2*c(1:n2) + i2 + rnorm(n=n2, mean=0, sd=100)))
if(omitx){
plot(change, type ="l", xlab = "", ylab = "y", main = title)
} else {
plot(change, type ="l", xlab = "Time", ylab = "y", main = title)
}
plot_slopes(n1, n2, i1, i2, slope1, slope2)
d <- ts(change, frequency=1, start=c(0,1))
proc <- efp(d ~ 1, d, type = "Rec-CUSUM", rescale = TRUE)
if (omitx & omit_title){
plot(proc, main = "" ,xlab = "")
} else if(omitx){
plot(proc, xlab = "")
} else if (omit_title) {
plot(proc, main = "")
} else {
plot(proc)
}
res <- sctest(proc)
p <- round(res$p.value, 3)
text(30, max(c(0.9*max(proc$process), 2.5)), paste0("p-value = ",p), cex = 1)
}
change_pos_intertrend <- function(n1, n2){
par(mfrow = c(3, 2))
# change in mean
change_intertrend(n1, n2, 5, 10, 3, 3, "Change in intercept", omitx = TRUE)
# change in variance
change_intertrend(n1, n2, 5, 5, -2, 4, "Change in trend", omitx = TRUE, omit_title = TRUE)
# change in mean and variance
change_intertrend(n1, n2, 30, 1, 4, 2, "Change in intercept and trend", omit_title = TRUE)
par(mfrow = c(1,1))
}
change_pos_intertrend(120, 120)
change_pos_intertrend <- function(n1, n2){
par(mfrow = c(3, 2))
change_intertrend(n1, n2, 5, 10, 3, 3, "Change in intercept", omitx = TRUE)
change_intertrend(n1, n2, 5, 5, -1, 1, "Change in trend", omitx = TRUE, omit_title = TRUE)
change_intertrend(n1, n2, 30, 1, 4, 2, "Change in intercept and trend", omit_title = TRUE)
par(mfrow = c(1,1))
}
change_pos_intertrend(120, 120)
change_pos_intertrend <- function(n1, n2){
par(mfrow = c(3, 2))
change_intertrend(n1, n2, 5, 10, 3, 3, "Change in intercept", omitx = TRUE)
change_intertrend(n1, n2, 5, 5, -1, 1.5, "Change in trend", omitx = TRUE, omit_title = TRUE)
change_intertrend(n1, n2, 30, 1, 4, 2, "Change in intercept and trend", omit_title = TRUE)
par(mfrow = c(1,1))
}
change_pos_intertrend(120, 120)
autocorr <- function(n1, n2, c){
# no change point but strong autocorrelation
autocorr <- arima.sim(model = list(order = c(1, 0, 0), ar = c), n = n1+n2)
plot(autocorr, ylab = "y", main = "No change point, strong positive autocorrelation")
proc <- efp(autocorr ~ 1, autocorr, type = "Rec-CUSUM", rescale = TRUE)
plot(proc, main = "")
res <- sctest(proc)
p <- round(res$p.value, 3)
text(30, max(c(0.9*max(proc$process), 2.5)), paste0("p-value = ",p), cex = 1)
}
autocorr <- function(n1, n2, c){
# no change point but strong autocorrelation
autocorr <- arima.sim(model = list(order = c(1, 0, 0), ar = c), n = n1+n2)
plot(autocorr, ylab = "y", main = "No change point, strong positive autocorrelation")
proc <- efp(autocorr ~ 1, autocorr, type = "Rec-CUSUM", rescale = TRUE)
plot(proc, main = "")
res <- sctest(proc)
p <- round(res$p.value, 3)
text(30, max(c(0.9*max(proc$process), 2.5)), paste0("p-value = ",p), cex = 1)
}
change_pos_intertrend <- function(n1, n2, c){
par(mfrow = c(3, 2))
change_intertrend(n1, n2, 5, 10, 3, 3, "Change in intercept", omitx = TRUE)
change_intertrend(n1, n2, 5, 10, -1, 1.5, "Change in intercept and trend",omitx = TRUE, omit_title = TRUE)
autocorr(n1, n2, c)
par(mfrow = c(1,1))
}
autocorr <- function(n1, n2, c){
# no change point but strong autocorrelation
autocorr <- arima.sim(model = list(order = c(1, 0, 0), ar = c), n = n1+n2)
plot(autocorr, ylab = "y", main = paste0("No change point, autocorrelation: ", c))
proc <- efp(autocorr ~ 1, autocorr, type = "Rec-CUSUM", rescale = TRUE)
plot(proc, main = "")
res <- sctest(proc)
p <- round(res$p.value, 3)
text(30, max(c(0.9*max(proc$process), 2.5)), paste0("p-value = ",p), cex = 1)
}
change_pos_intertrend <- function(n1, n2, c){
par(mfrow = c(3, 2))
change_intertrend(n1, n2, 5, 10, 3, 3, "Change in intercept", omitx = TRUE)
change_intertrend(n1, n2, 5, 10, -1, 1.5, "Change in intercept and trend",omitx = TRUE, omit_title = TRUE)
autocorr(n1, n2, c)
par(mfrow = c(1,1))
}
change_pos_intertrend(120, 120, 0.4)
change_pos_intertrend(20, 220, 0.5)
autocorr <- function(n1, n2, c){
# no change point but strong autocorrelation
autocorr <- arima.sim(model = list(order = c(1, 0, 0), ar = c), n = n1+n2)
plot(autocorr, ylab = "y", main = paste0("No change point, autocorrelation: ", c))
abline(h=0)
proc <- efp(autocorr ~ 1, autocorr, type = "Rec-CUSUM", rescale = TRUE)
plot(proc, main = "")
res <- sctest(proc)
p <- round(res$p.value, 3)
text(30, max(c(0.9*max(proc$process), 2.5)), paste0("p-value = ",p), cex = 1)
}
change_pos_intertrend <- function(n1, n2, c){
par(mfrow = c(3, 2))
change_intertrend(n1, n2, 5, 10, 3, 3, "Change in intercept", omitx = TRUE)
change_intertrend(n1, n2, 5, 10, -1, 1.5, "Change in intercept and trend",omitx = TRUE, omit_title = TRUE)
autocorr(n1, n2, c)
par(mfrow = c(1,1))
}
change_pos_intertrend(120, 120, 0.4)
change_pos_intertrend(20, 220, 0.5)
change_pos_intertrend(220, 20, 0.6)
change_pos_intertrend(60, 180, 0.7)
change_pos_intertrend(180, 60, 0.8)
change_pos_intertrend(60, 180, 0.7)
change_pos_intertrend(180, 60, 0.8)
res <- readRDS("/Users/veronikagrupp/hpc_vroni/home/veronika/CPD/results/prelim_NOAA_LAI_tippet_nperm_3_3.rds")
View(res)
res[[3]]
hist(res[[3]])
# load perm_results
res <- readRDS("/Users/veronikagrupp/hpc_vroni/home/veronika/CPD/results/prelim_NOAA_LAI_tippet_nperm_3.rds")
View(res)
q_results <- res[[1]]
perm_results <- res[[2]]
rm(res)
#********************
# get empirical distribution of maxT_all and stcs
dis_maxT_all <- ecdf(q_results[,4])
dis_stcs<- ecdf(q_results[,2])
nperm = 3
wt <- vector(length = nperm)
library(tidyverse)
library(magrittr)
get_wt <- function(clust_perm){
get_p <- function(clust_perm, j){
p_maxT_all <- 1 - dis_maxT_all(clust_perm$cluster.max[j]) + 1/nperm
if(p_maxT_all<=0) p_maxT_all <- 0.000001
p_stcs <- 1 - dis_stcs(clust_perm$cluster.count[j]) + 1/nperm
if(p_stcs<=0) p_stcs <- 0.000001
# combine in new test statistic
w <- 1 - min(log(p_maxT_all), log(p_stcs))
if (is.finite(w)){
return(w)
} else{
return(0)
}
}
j <- seq(1:length(clust_perm$cluster.count))
w_tmp <- purrr::map(j, get_p, clust_perm = clust_perm)
return(max(as.vector(w_tmp), na.rm = TRUE))
}
wt <- purrr::map(perm_results, get_wt)
get_wt <- function(clust_perm){
get_p <- function(clust_perm, j){
p_maxT_all <- 1 - dis_maxT_all(clust_perm$cluster.max[j]) + 1/nperm
if(p_maxT_all<=0) p_maxT_all <- 0.000001
p_stcs <- 1 - dis_stcs(clust_perm$cluster.count[j]) + 1/nperm
if(p_stcs<=0) p_stcs <- 0.000001
# combine in new test statistic
w <- 1 - min(log(p_maxT_all), log(p_stcs))
if (is.finite(w)){
return(w)
} else{
return(0)
}
}
j <- seq(1:length(clust_perm$cluster.count))
w_tmp <- purrr::map(j, get_p, clust_perm = clust_perm)
return(max(unlist(w_tmp), na.rm = TRUE))
}
wt <- purrr::map(perm_results, get_wt)
wt <- purrr::map(perm_results, get_wt) %>%
unlist()
wt1 <- wt
#******************************
wt <- vector(length = nperm)
# convert this for loop into some apply or map function
for(i in 1:nperm){
clust_perm <- perm_results[[i]]
w_tmp <- vector(length = length(clust_perm$cluster.count))
#cat("Number of cluster: ", length(clust_perm$cluster.count))
for(j in 1:length(clust_perm$cluster.count)){
# retrieve p-values for each cluster
p_maxT_all <- 1 - dis_maxT_all(clust_perm$cluster.max[j]) + 1/nperm
if(p_maxT_all<=0) p_maxT_all <- 0.000001
p_stcs <- 1 - dis_stcs(clust_perm$cluster.count[j]) + 1/nperm
if(p_stcs<=0) p_stcs <- 0.000001
# combine in new test statistic
w <- 1 - min(log(p_maxT_all), log(p_stcs))
if (is.finite(w)){
w_tmp[j] <- w
} else{
w_tmp[j] <- 0
}
}
# get max test statistic value for each permutation
wt[i] <- max(w_tmp, na.rm = TRUE)
}
get_wt <- function(clust_perm, dis_maxT_all, dis_stcs){
get_p <- function(clust_perm, j, dis_maxT_all, dis_stcs){
p_maxT_all <- 1 - dis_maxT_all(clust_perm$cluster.max[j]) + 1/nperm
if(p_maxT_all<=0) p_maxT_all <- 0.000001
p_stcs <- 1 - dis_stcs(clust_perm$cluster.count[j]) + 1/nperm
if(p_stcs<=0) p_stcs <- 0.000001
# combine in new test statistic
w <- 1 - min(log(p_maxT_all), log(p_stcs))
if (is.finite(w)){
return(w)
} else{
return(0)
}
}
j <- seq(1:length(clust_perm$cluster.count))
w_tmp <- purrr::map(j, get_p, clust_perm = clust_perm, dis_maxT_all = dis_maxT_all, dis_stcs = dis_stcs)
return(max(unlist(w_tmp), na.rm = TRUE))
}
wt <- purrr::map(perm_results, get_wt, dis_maxT_all = dis_maxT_all, dis_stcs = dis_stcs) %>%
unlist()
get_wt <- function(clust_perm, dis_maxT_all, dis_stcs, last = FALSE){
# retrieve p-values for cluster size and cluster maximum for each cluster in the current permutation
get_p <- function(clust_perm, j, dis_maxT_all, dis_stcs){
p_maxT_all <- 1 - dis_maxT_all(clust_perm$cluster.max[j]) + 1/nperm
if(p_maxT_all<=0) p_maxT_all <- 0.000001
p_stcs <- 1 - dis_stcs(clust_perm$cluster.count[j]) + 1/nperm
if(p_stcs<=0) p_stcs <- 0.000001
# combine in new test statistic
w <- 1 - min(log(p_maxT_all), log(p_stcs))
if (is.finite(w)){
return(w)
} else{
return(0)
}
}
j <- seq(1:length(clust_perm$cluster.count))
# map over each cluster
w_tmp <- purrr::map(j, get_p, clust_perm = clust_perm, dis_maxT_all = dis_maxT_all, dis_stcs = dis_stcs)
# return maximum tippet value for current permutation
if(last){
return(list(max(unlist(w_tmp), na.rm = TRUE), w_tmp))
} else {
return(max(unlist(w_tmp), na.rm = TRUE))
}
}
# map over all permutations and retrieve each maximum tippet statistic
wt <- purrr::map(perm_results[1:(length(perm_results)-1)], get_wt, dis_maxT_all = dis_maxT_all, dis_stcs = dis_stcs) %>%
unlist()
l <- get_wt(perm_results[length(perm_results)], dis_maxT_all = dis_maxT_all, dis_stcs = dis_stcs, last = TRUE)
perm_results[length(perm_results)]
length(perm_results)
# get values for last ones and return original tippet values
l <- get_wt(perm_results[length(perm_results)], dis_maxT_all = dis_maxT_all,
dis_stcs = dis_stcs, last = TRUE, nperm = nperm)
get_wt <- function(clust_perm, dis_maxT_all, dis_stcs, nperm, last = FALSE){
# retrieve p-values for cluster size and cluster maximum for each cluster in the current permutation
get_p <- function(clust_perm, j, dis_maxT_all, dis_stcs, nperm){
p_maxT_all <- 1 - dis_maxT_all(clust_perm$cluster.max[j]) + 1/nperm
if(p_maxT_all<=0) p_maxT_all <- 0.000001
p_stcs <- 1 - dis_stcs(clust_perm$cluster.count[j]) + 1/nperm
if(p_stcs<=0) p_stcs <- 0.000001
# combine in new test statistic
w <- 1 - min(log(p_maxT_all), log(p_stcs))
if (is.finite(w)){
return(w)
} else{
return(0)
}
}
j <- seq(1:length(clust_perm$cluster.count))
# map over each cluster
w_tmp <- purrr::map(j, get_p, clust_perm = clust_perm, dis_maxT_all = dis_maxT_all, dis_stcs = dis_stcs, nperm = nperm)
# return maximum tippet value for current permutation
if(last){
return(list(max(unlist(w_tmp), na.rm = TRUE), w_tmp))
} else {
return(max(unlist(w_tmp), na.rm = TRUE))
}
}
# get values for last ones and return original tippet values
l <- get_wt(perm_results[length(perm_results)], dis_maxT_all = dis_maxT_all,
dis_stcs = dis_stcs, last = TRUE, nperm = nperm)
get_wt <- function(clust_perm, dis_maxT_all, dis_stcs, nperm, last = FALSE){
# retrieve p-values for cluster size and cluster maximum for each cluster in the current permutation
get_p <- function(j, clust_perm, dis_maxT_all, dis_stcs, nperm){
p_maxT_all <- 1 - dis_maxT_all(clust_perm$cluster.max[j]) + 1/nperm
if(p_maxT_all<=0) p_maxT_all <- 0.000001
p_stcs <- 1 - dis_stcs(clust_perm$cluster.count[j]) + 1/nperm
if(p_stcs<=0) p_stcs <- 0.000001
# combine in new test statistic
w <- 1 - min(log(p_maxT_all), log(p_stcs))
if (is.finite(w)){
return(w)
} else{
return(0)
}
}
js <- seq(1:length(clust_perm$cluster.count))
# map over each cluster
w_tmp <- purrr::map(js, get_p, clust_perm = clust_perm, dis_maxT_all = dis_maxT_all, dis_stcs = dis_stcs, nperm = nperm)
# return maximum tippet value for current permutation
if(last){
return(list(max(unlist(w_tmp), na.rm = TRUE), w_tmp))
} else {
return(max(unlist(w_tmp), na.rm = TRUE))
}
}
# map over all permutations but the last one and retrieve each maximum tippet statistic
wt <- purrr::map(perm_results[1:(length(perm_results)-1)], get_wt,
dis_maxT_all = dis_maxT_all, dis_stcs = dis_stcs, nperm = nperm) %>%
unlist()
# get values for last ones and return original tippet values
l <- get_wt(perm_results[length(perm_results)], dis_maxT_all = dis_maxT_all,
dis_stcs = dis_stcs, last = TRUE, nperm = nperm)
# get values for last ones and return original tippet values
l <- get_wt(perm_results[[length(perm_results)]], dis_maxT_all = dis_maxT_all,
dis_stcs = dis_stcs, last = TRUE, nperm = nperm)
l[[1]]
wt <- c(wt, l[[1]])
l[[2]]
perm_results[[length(perm_results)]]$cluster.count
perm_results[[length(perm_results)]]
View(l)
unlist(l[[2]])
unique(unlist(l[[2]]))
load_all()
library(devtools)
cd ..
pwd()
library(devtools)
load_all()
mat <- perm_matrix(nobs = 40, nperm = 1000)
library(pryr)
object_size(mat)
