clusters_neg$clusters[clusters_neg$clusters > 0]<- clusters_neg$clusters[clusters_neg$clusters > 0] + nclust_pos
clusters_sep[[1]]<- clusters_pos$clusters + clusters_neg$clusters
clusters_sep[[2]]<- c(clusters_pos$cluster.count, clusters_neg$cluster.count)
names(clusters_sep)<- c("clusters", "cluster.count")
stcs<- max(clusters_sep$cluster.count, na.rm = TRUE)
stcs_idx<- which(length(clusters_sep$cluster.count)==stcs)
stcs_cluster_results<- data[clusters_sep$clusters==stcs_idx] # retrieve all cells (by position in matrix?) that belong to the biggest cluster
stcs_maxT<- max(stcs_cluster_results, na.rm = TRUE)
# within cluster properties --- maxT works fine, all others are similar or worse
stcs_mvt<- vector(length = length(clusters_sep$cluster.count), mode = "list")
for (i in 1:length(clusters_sep$cluster.count)){
#stcs_mvt[[i]]<- vector(length = 11, mode = "list")
#print(i)
#get results for cluster i and save for later
cluster_results<- data[clusters_sep$clusters==i]
stcs_mvt[[i]]$results<- cluster_results
# maxT
stcs_mvt[[i]]$maxT<- max(cluster_results, na.rm = TRUE)
# avgT
stcs_mvt[[i]]$meanT<- mean(cluster_results, na.rm = TRUE)
# medianT
stcs_mvt[[i]]$medianT<- median(cluster_results, na.rm = TRUE)
# quantiles: 0.90, 0.95
stcs_mvt[[i]]$q90T<- unname(quantile(cluster_results, probs = 0.90, na.rm = TRUE))
stcs_mvt[[i]]$q95T<- unname(quantile(cluster_results, probs = 0.95, na.rm = TRUE))
# average of top: 3, 5, 10 grid cells
stcs_mvt[[i]]$meanTop3<- mean(head(sort(cluster_results, decreasing = TRUE), n=3), na.rm = TRUE)
stcs_mvt[[i]]$meanTop5<- mean(head(sort(cluster_results, decreasing = TRUE), n=5), na.rm = TRUE)
stcs_mvt[[i]]$meanTop10<- mean(head(sort(cluster_results, decreasing = TRUE), n=10), na.rm = TRUE)
# average of top: 5% 10%
stcs_mvt[[i]]$meanTop5percent<- mean(head(sort(cluster_results, decreasing = TRUE), n=length(cluster_results)*.05), na.rm = TRUE)
stcs_mvt[[i]]$meanTop10percent<- mean(head(sort(cluster_results, decreasing = TRUE), n=length(cluster_results)*.10), na.rm = TRUE)
}
return(list(stcs=stcs, clusters=clusters_sep, stcs_maxT=stcs_maxT, stcs_mvt=stcs_mvt))
}
for(i in 1:nperm){
tmp<- apply(data[,,perm_matrix[i,]], 1:2, fx)
maxT[i]<- max(abs(as.vector(tmp)), na.rm = TRUE)
tmp_stcs<- get_stcs_mod(tmp, alpha_local, null_distribution)
stcs[i]<- tmp_stcs$stcs
stcs_maxT[i]<- tmp_stcs$stcs_maxT
stcs_mvt[i] <- tmp_stcs$stcs_mvt
if(verbose) if((i%%10)==0) cat(i,"\n")
}
warnings()
stcs
stcs_maxT
nperm=20
# perm_dist ----
#***********************
perm_matrix<- perm_matrix(nobs = dim(data)[3], nperm = nperm, block_size = block_size, seed = seed)
data=data_detrend
# perm_dist ----
#***********************
perm_matrix<- perm_matrix(nobs = dim(data)[3], nperm = nperm, block_size = block_size, seed = seed)
maxT<- vector(length = nperm)
stcs<- vector(length = nperm)
stcs_maxT<- vector(length = nperm)
stcs_mvt <- vector(length = nperm)
cat("starting permutations:\n")
for(i in 1:nperm){
tmp<- apply(data[,,perm_matrix[i,]], 1:2, fx)
maxT[i]<- max(abs(as.vector(tmp)), na.rm = TRUE)
tmp_stcs<- get_stcs_mod(tmp, alpha_local, null_distribution)
stcs[i]<- tmp_stcs$stcs
stcs_maxT[i]<- tmp_stcs$stcs_maxT
stcs_mvt[i] <- tmp_stcs$stcs_mvt
if(verbose) if((i%%10)==0) cat(i,"\n")
}
stcs
stcs_mvt
View(stcs_mvt)
tmp<- apply(data[,,perm_matrix[1,]], 1:2, fx)
if(null_distribution == "normal") thr<- qnorm(1-alpha_local/2)
pixel_sign<- sign(data)
pixel_sign
pixel_significant<- abs(data)>thr
pixel_significant
View(stcs_mvt)
pixel_result<- pixel_sign*pixel_significant
# positive
pixel_result_pos<- pixel_result
pixel_result_pos[is.na(pixel_result_pos)]<- -999
clusters_pos<- osc::cca(pixel_result_pos,count.cells = TRUE, s=1, mode = 2, # only values >0 are included in osc:cca
count.max  = length(pixel_sign))
pixel_result<- pixel_sign*pixel_significant
# positive
pixel_result_pos<- pixel_result
pixel_result_pos[is.na(pixel_result_pos)]<- -999
pixel_result_pos
clusters_pos<- osc::cca(pixel_result_pos,count.cells = TRUE, s=1, mode = 2, # only values >0 are included in osc:cca
count.max  = length(pixel_sign))
# get_stcs step by step ----
#***********************
tmp<- apply(data[,,perm_matrix[3,]], 1:2, fx)
data = tmp
if(null_distribution == "normal") thr<- qnorm(1-alpha_local/2)
pixel_sign<- sign(data)
pixel_sign
pixel_significant<- abs(data)>thr
pixel_significant
pixel_result<- pixel_sign*pixel_significant
# positive
pixel_result_pos<- pixel_result
pixel_result_pos[is.na(pixel_result_pos)]<- -999
clusters_pos<- osc::cca(pixel_result_pos,count.cells = TRUE, s=1, mode = 2, # only values >0 are included in osc:cca
count.max  = length(pixel_sign))
View(clusters_pos)
clusters_pos$clusters
clusters_pos$cluster.count
stcs_pos<- max(clusters_pos$cluster.count)
nclust_pos<- length(clusters_pos$cluster.count)
clusters_sep<- vector(mode = "list", length = 2)
# negative
pixel_result_neg<- pixel_result
pixel_result_neg[pixel_result_neg == -1] = 10 # swap signs so that originally negative values will now be considered in osc:cca
pixel_result_neg[pixel_result_neg == 1] = -10
pixel_result_neg[is.na(pixel_result_neg)] = -999
clusters_neg<- osc::cca(pixel_result_neg,count.cells = TRUE, s=1, mode = 2,
count.max = length(pixel_sign))
stcs_neg<- max(clusters_neg$cluster.count)
# join
clusters_neg$clusters[clusters_neg$clusters > 0]<- clusters_neg$clusters[clusters_neg$clusters > 0] + nclust_pos
clusters_sep[[1]]<- clusters_pos$clusters + clusters_neg$clusters
clusters_sep[[2]]<- c(clusters_pos$cluster.count, clusters_neg$cluster.count)
names(clusters_sep)<- c("clusters", "cluster.count")
View(clusters_sep)
clusters_sep$clusters
stcs<- max(clusters_sep$cluster.count, na.rm = TRUE)
stcs_idx<- which(length(clusters_sep$cluster.count)==stcs)
stcs_idx
clusters_sep$cluster.count
stcs_idx<- which(length(clusters_sep$cluster.count)==stcs)
length(clusters_sep$cluster.count)
which(clusters_sep$cluster.count==stcs)
stcs<- max(clusters_sep$cluster.count, na.rm = TRUE)
stcs_idx<- which(clusters_sep$cluster.count==stcs)
stcs_cluster_results<- data[clusters_sep$clusters==stcs_idx] # retrieve all cells (by position in matrix?) that belong to the biggest cluster
stcs_maxT<- max(stcs_cluster_results, na.rm = TRUE)
# within cluster properties --- maxT works fine, all others are similar or worse
stcs_mvt<- vector(length = length(clusters_sep$cluster.count), mode = "list")
View(stcs_mvt)
# within cluster properties --- maxT works fine, all others are similar or worse
stcs_mvt<- vector(length = length(clusters_sep$cluster.count), mode = "list")
rm(stcs_mvt)
# within cluster properties --- maxT works fine, all others are similar or worse
stcs_mvt<- vector(length = length(clusters_sep$cluster.count), mode = "list")
View(stcs_mvt)
for (i in 1:length(clusters_sep$cluster.count)){
#stcs_mvt[[i]]<- vector(length = 11, mode = "list")
#print(i)
#get results for cluster i and save for later
cluster_results<- data[clusters_sep$clusters==i]
stcs_mvt[[i]]$results<- cluster_results
# maxT
stcs_mvt[[i]]$maxT<- max(cluster_results, na.rm = TRUE)
# avgT
stcs_mvt[[i]]$meanT<- mean(cluster_results, na.rm = TRUE)
# medianT
stcs_mvt[[i]]$medianT<- median(cluster_results, na.rm = TRUE)
# quantiles: 0.90, 0.95
stcs_mvt[[i]]$q90T<- unname(quantile(cluster_results, probs = 0.90, na.rm = TRUE))
stcs_mvt[[i]]$q95T<- unname(quantile(cluster_results, probs = 0.95, na.rm = TRUE))
# average of top: 3, 5, 10 grid cells
stcs_mvt[[i]]$meanTop3<- mean(head(sort(cluster_results, decreasing = TRUE), n=3), na.rm = TRUE)
stcs_mvt[[i]]$meanTop5<- mean(head(sort(cluster_results, decreasing = TRUE), n=5), na.rm = TRUE)
stcs_mvt[[i]]$meanTop10<- mean(head(sort(cluster_results, decreasing = TRUE), n=10), na.rm = TRUE)
# average of top: 5% 10%
stcs_mvt[[i]]$meanTop5percent<- mean(head(sort(cluster_results, decreasing = TRUE), n=length(cluster_results)*.05), na.rm = TRUE)
stcs_mvt[[i]]$meanTop10percent<- mean(head(sort(cluster_results, decreasing = TRUE), n=length(cluster_results)*.10), na.rm = TRUE)
}
View(stcs_mvt)
# simulation to check FPR of change point detection methods
library(bfast)
trend <- rep(sin(2*pi*c(0:11)/12),20) #+c(rep(0,12*10),rep(0.5,12*10))
trend
# simulation to check FPR of change point detection methods
library(bfast)
install.packages('bfast')
# simulation to check FPR of change point detection methods
library(bfast)
ti <- c()
n <- 10
trend <- rep(sin(2*pi*c(0:11)/12),20) #+c(rep(0,12*10),rep(0.5,12*10))
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
res <- bfast(d, max.iter=10)
if (!is.na(res$Time)) ti <- c(ti, res$Time)
}
n <- 5000
trend <- rep(sin(2*pi*c(0:11)/12),20) #+c(rep(0,12*10),rep(0.5,12*10))
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
res <- bfast(d, max.iter=10)
if (!is.na(res$Time)) ti <- c(ti, res$Time)
}
n <- 500
trend <- rep(sin(2*pi*c(0:11)/12),20) #+c(rep(0,12*10),rep(0.5,12*10))
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
res <- bfast(d, max.iter=10)
if (!is.na(res$Time)) ti <- c(ti, res$Time)
}
length(ti)
if (length(ti) > 5) hist(ti, col="lightblue", br=length(ti)/2)
length(ti)/n # should be 0.05
plot(d) # plot the last t.s. as an example
n <- 1000
trend <- rep(sin(2*pi*c(0:11)/12),20) #+c(rep(0,12*10),rep(0.5,12*10))
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
res <- bfast(d, max.iter=10)
if (!is.na(res$Time)) ti <- c(ti, res$Time)
}
length(ti)
if (length(ti) > 5) hist(ti, col="lightblue", br=length(ti)/2)
length(ti)/n # should be 0.05
trend
ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
res <- bfast(d, max.iter=10)
View(res)
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
res <- bfast(d, max.iter=10)
View(res)
View(res)
trend <- rep(sin(2*pi*c(0:11)/12),20) #+c(rep(0,12*10),rep(0.5,12*10))
# OLS-CUSUM ----
#*********************************************************************
library(strucchange)
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- efp(d ~ 1, type = "OLS-CUSUM")
View(temp)
res <-  sctest(temp)
View(res)
res$p.value
n <- 10
fp <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- efp(d ~ 1, type = "OLS-CUSUM")
res <-  sctest(temp)
if (res$p.value < 0.05) fp <- c(fp, res$p.value)
}
length(fp)
n <- 1000
rec_cusum <- test_CPD_efp(n, 'Rec-CUSUM', trend)
test_CPD_efp <- function(n, fun, trend, h = NULL){
fp <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- efp(d ~ 1, d, type = fun, h = h)
res <-  sctest(temp)
if (res$p.value < 0.05) fp <- c(fp, res$p.value)
}
fpr <- length(fp)/n
cat('False positive rate for efp function ' + fun + ' is: ' + fpr)
}
rec_cusum <- test_CPD_efp(n, 'Rec-CUSUM', trend)
rec_cusum <- test_CPD_efp(n, 'Rec-CUSUM', trend)
test_CPD_efp <- function(n, fun, trend, h = NULL){
fp <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- efp(d ~ 1, d, type = fun, h = h)
res <-  sctest(temp)
if (res$p.value < 0.05) fp <- c(fp, res$p.value)
}
fpr <- length(fp)/n
cat(paste('False positive rate for efp function ', fun,' is: ', fpr))
}
rec_cusum <- test_CPD_efp(n, 'Rec-CUSUM', trend)
n <- 5000
rec_cusum <- test_CPD_efp(n, 'Rec-CUSUM', trend)
n <- 5000
rec_cusum <- test_CPD_efp(n, 'Rec-CUSUM', trend)
ols_cusum <- test_CPD_efp(n, 'OLS-CUSUM', trend)
n <- 10000
ols_cusum <- test_CPD_efp(n, 'OLS-CUSUM', trend)
test_CPD_efp <- function(n, fun, trend, h = NULL){
fp <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- efp(d ~ 1, d, type = fun, h = h)
res <-  sctest(temp)
if (res$p.value < 0.05) fp <- c(fp, res$p.value)
}
fpr <- length(fp)/n
cat(paste('False positive rate for efp function ', fun,' is: ', fpr))
return(fpr)
}
n <- 10000
test_CPD_efp <- function(n, fun, trend, h = NULL){
fp <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- efp(d ~ 1, d, type = fun, h = h)
res <-  sctest(temp)
if (res$p.value < 0.05) fp <- c(fp, res$p.value)
}
fpr <- length(fp)/n
cat(paste('False positive rate for efp function ', fun,' is: ', fpr))
return(fpr)
}
ols_cusum <- test_CPD_efp(n, 'OLS-CUSUM', trend)
test_CPD_efp <- function(n, fun, trend, h = NULL){
p <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- efp(d ~ 1, d, type = fun, h = h)
res <-  sctest(temp)
p <- c(p, res$p.value)
}
fpr <- sum(p<0.05)/n
cat(paste('False positive rate for efp function ', fun,' is: ', fpr))
return(p)
}
rec_cusum <- test_CPD_efp(n, 'Rec-CUSUM', trend)
rec_cusum
ols_cusum <- test_CPD_efp(n, 'OLS-CUSUM', trend)
rec_mosum <- test_CPD_efp(n, 'Rec-MOSUM', trend, h = 0.05)
ols_mosum <- test_CPD_efp(n, 'OLS-MOSUM', trend, h = 0.05)
rec_mosum <- test_CPD_efp(n, 'Rec-MOSUM', trend, h = 0.3)
ols_mosum <- test_CPD_efp(n, 'OLS-MOSUM', trend, h = 0.01)
recur_estimates <- test_CPD_efp(n, 'fluctuation', trend)
n <- 100
recur_estimates <- test_CPD_efp(n, 'fluctuation', trend)
n <- 1000
recur_estimates <- test_CPD_efp(n, 'fluctuation', trend)
n <- 5000
recur_estimates <- test_CPD_efp(n, 'fluctuation', trend)
mov_estimates <- test_CPD_efp(n, 'ME', trend, h = 0.05)
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- Fstats(d ~ 1)
res <- sctest(temp)
View(res)
View(res)
res <- sctest(temp, type = c("supF", "aveF", "expF"))
View(res)
res <- sctest(temp, type = "aveF")
View(res)
res <- sctest(temp, type = "expF")
View(res)
View(res)
test_CPD_fstat <- function(n, fun){
p <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- Fstats(d ~ 1)
res <- sctest(temp, type = fun)
p <- c(p, res$p.value)
}
fpr <- sum(p<0.05)/n
cat(paste('False positive rate for efp function ', fun,' is: ', fpr))
return(p)
}
test_CPD_fstat <- function(n){
p_sup <- c()
p_exp <- c()
p_ave <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- Fstats(d ~ 1)
res_sup <- sctest(temp, type = 'supF')
p_sup <- c(p_sup, res_sup$p.value)
res_exp <- sctest(temp, type = 'expF')
p_exp <- c(p_exp, res_exp$p.value)
res_ave <- sctest(temp, type = 'aveF')
p_ave <- c(p_ave, res_ave$p.value)
}
fpr_sup <- sum(p_sup<0.05)/n
cat(paste('False positive rate for supF is: ', fpr_sup))
fpr_exp <- sum(p_exp<0.05)/n
cat(paste('False positive rate for expF is: ', fpr_exp))
fpr_ave <- sum(p_ave<0.05)/n
cat(paste('False positive rate for aveF is: ', fpr_ave))
}
test_CPD_fstat <- function(n){
p_sup <- c()
p_exp <- c()
p_ave <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- Fstats(d ~ 1)
res_sup <- sctest(temp, type = 'supF')
p_sup <- c(p_sup, res_sup$p.value)
res_exp <- sctest(temp, type = 'expF')
p_exp <- c(p_exp, res_exp$p.value)
res_ave <- sctest(temp, type = 'aveF')
p_ave <- c(p_ave, res_ave$p.value)
}
fpr_sup <- sum(p_sup<0.05)/n
cat(paste('False positive rate for supF is: ', fpr_sup))
fpr_exp <- sum(p_exp<0.05)/n
cat(paste('False positive rate for expF is: ', fpr_exp))
fpr_ave <- sum(p_ave<0.05)/n
cat(paste('False positive rate for aveF is: ', fpr_ave))
}
fstat <- test_CPD_fstat(5000)
fstat <- test_CPD_fstat(10000)
# AMOC (changepoint package) ----
#*********************************************************************
library(changepoint)
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- cpt.mean(d, penalty = "Asymptotic", pen.value = 0.05, method = "AMOC",
test.stat = "Normal", class = FALSE)
temp <- cpt.mean(d, penalty = "Asymptotic", pen.value = 0.05, method = "AMOC",
test.stat = "Normal")
View(temp)
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- cpt.mean(d, penalty = "Asymptotic", pen.value = 0.05, method = "AMOC",
test.stat = "Normal", class = FALSE)
temp
temp[2]
temp[2] < 0.05
test_CPD_amoc <- function(n, stat){
p <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- cpt.mean(d, penalty = "Asymptotic", pen.value = 0.05, method = "AMOC",
test.stat = stat, class = FALSE)
p <- c(p, temp[2])
}
fpr <- sum(p<0.05)/n
cat(paste('False positive rate for AMOC ', stat,' is: ', fpr))
return(p)
}
norm_amoc <- test_CPD_amoc(5000,"Normal")
cusum_amoc <- test_CPD_amoc(5000,"CUSUM")
norm_amoc <- test_CPD_amoc(5000,"Normal")
norm_amoc <- test_CPD_amoc(10000,"Normal")
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- cpt.mean(d, penalty = "Asymptotic", pen.value = 0.05, method = "AMOC",
test.stat = "Normal")
summary(temp)
plot(temp)
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- cpt.mean(d, penalty = "null", pen.value = 0.05, method = "AMOC",
test.stat = "Normal")
temp <- cpt.mean(d, penalty = "Manual", pen.value = "null", method = "AMOC",
test.stat = "Normal")
temp <- cpt.mean(d, penalty = "Manual", pen.value = "null likelihood", method = "AMOC",
test.stat = "Normal")
library(trend)
install.packages('trend')
library(trend)
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- pettitt.test(d)
View(temp)
View(temp)
p <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
res <- pettitt.test(d)
p <- c(p, res$p.value)
}
fpr <- sum(p<0.05)/n
cat(paste('False positive rate for efp function ', fun,' is: ', fpr))
cat(paste('False positive rate for pettitts test is: ', fpr))
n <- 10000
p <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
res <- pettitt.test(d)
p <- c(p, res$p.value)
}
fpr <- sum(p<0.05)/n
cat(paste('False positive rate for pettitts test is: ', fpr))
trend <- rep(sin(2*pi*c(0:11)/12),40)
d <- ts(rnorm(12*40,0,.2)+trend, frequency=12, start=c(2000,1))
n <- 10000
p <- c()
for (i in 1:n) {
d <- ts(rnorm(12*40,0,.2)+trend, frequency=12, start=c(2000,1))
res <- pettitt.test(d)
p <- c(p, res$p.value)
}
fpr <- sum(p<0.05)/n
cat(paste('False positive rate for pettitts test is: ', fpr))
sum(ols_cusum<0.05)
# strucchange package ----
#*********************************************************************
library(strucchange)
test_CPD_efp <- function(n, fun, trend, h = NULL){
p <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- efp(d ~ 1, d, type = fun, h = h, rescale = TRUE)
res <-  sctest(temp)
p <- c(p, res$p.value)
}
fpr <- float(sum(p<0.05))/float(n)
cat(paste('False positive rate for efp function ', fun,' is: ', fpr))
return(p)
}
trend <- rep(sin(2*pi*c(0:11)/12),20) #+c(rep(0,12*10),rep(0.5,12*10))
n <- 5000
rec_cusum <- test_CPD_efp(n, 'Rec-CUSUM', trend)
ols_cusum <- test_CPD_efp(n, 'OLS-CUSUM', trend)
test_CPD_efp <- function(n, fun, trend, h = NULL){
p <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- efp(d ~ 1, d, type = fun, h = h, rescale = TRUE)
res <-  sctest(temp)
p <- c(p, res$p.value)
}
fpr <- as.double(sum(p<0.05))/as.double(n)
cat(paste('False positive rate for efp function ', fun,' is: ', fpr))
return(p)
}
ols_cusum <- test_CPD_efp(n, 'OLS-CUSUM', trend)
