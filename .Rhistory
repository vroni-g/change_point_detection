trend <- rep(sin(2*pi*c(0:11)/12),20) #+c(rep(0,12*10),rep(0.5,12*10))
# OLS-CUSUM ----
#*********************************************************************
library(strucchange)
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- efp(d ~ 1, type = "OLS-CUSUM")
View(temp)
res <-  sctest(temp)
View(res)
res$p.value
n <- 10
fp <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- efp(d ~ 1, type = "OLS-CUSUM")
res <-  sctest(temp)
if (res$p.value < 0.05) fp <- c(fp, res$p.value)
}
length(fp)
n <- 1000
rec_cusum <- test_CPD_efp(n, 'Rec-CUSUM', trend)
test_CPD_efp <- function(n, fun, trend, h = NULL){
fp <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- efp(d ~ 1, d, type = fun, h = h)
res <-  sctest(temp)
if (res$p.value < 0.05) fp <- c(fp, res$p.value)
}
fpr <- length(fp)/n
cat('False positive rate for efp function ' + fun + ' is: ' + fpr)
}
rec_cusum <- test_CPD_efp(n, 'Rec-CUSUM', trend)
rec_cusum <- test_CPD_efp(n, 'Rec-CUSUM', trend)
test_CPD_efp <- function(n, fun, trend, h = NULL){
fp <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- efp(d ~ 1, d, type = fun, h = h)
res <-  sctest(temp)
if (res$p.value < 0.05) fp <- c(fp, res$p.value)
}
fpr <- length(fp)/n
cat(paste('False positive rate for efp function ', fun,' is: ', fpr))
}
rec_cusum <- test_CPD_efp(n, 'Rec-CUSUM', trend)
n <- 5000
rec_cusum <- test_CPD_efp(n, 'Rec-CUSUM', trend)
n <- 5000
rec_cusum <- test_CPD_efp(n, 'Rec-CUSUM', trend)
ols_cusum <- test_CPD_efp(n, 'OLS-CUSUM', trend)
n <- 10000
ols_cusum <- test_CPD_efp(n, 'OLS-CUSUM', trend)
test_CPD_efp <- function(n, fun, trend, h = NULL){
fp <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- efp(d ~ 1, d, type = fun, h = h)
res <-  sctest(temp)
if (res$p.value < 0.05) fp <- c(fp, res$p.value)
}
fpr <- length(fp)/n
cat(paste('False positive rate for efp function ', fun,' is: ', fpr))
return(fpr)
}
n <- 10000
test_CPD_efp <- function(n, fun, trend, h = NULL){
fp <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- efp(d ~ 1, d, type = fun, h = h)
res <-  sctest(temp)
if (res$p.value < 0.05) fp <- c(fp, res$p.value)
}
fpr <- length(fp)/n
cat(paste('False positive rate for efp function ', fun,' is: ', fpr))
return(fpr)
}
ols_cusum <- test_CPD_efp(n, 'OLS-CUSUM', trend)
test_CPD_efp <- function(n, fun, trend, h = NULL){
p <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- efp(d ~ 1, d, type = fun, h = h)
res <-  sctest(temp)
p <- c(p, res$p.value)
}
fpr <- sum(p<0.05)/n
cat(paste('False positive rate for efp function ', fun,' is: ', fpr))
return(p)
}
rec_cusum <- test_CPD_efp(n, 'Rec-CUSUM', trend)
rec_cusum
ols_cusum <- test_CPD_efp(n, 'OLS-CUSUM', trend)
rec_mosum <- test_CPD_efp(n, 'Rec-MOSUM', trend, h = 0.05)
ols_mosum <- test_CPD_efp(n, 'OLS-MOSUM', trend, h = 0.05)
rec_mosum <- test_CPD_efp(n, 'Rec-MOSUM', trend, h = 0.3)
ols_mosum <- test_CPD_efp(n, 'OLS-MOSUM', trend, h = 0.01)
recur_estimates <- test_CPD_efp(n, 'fluctuation', trend)
n <- 100
recur_estimates <- test_CPD_efp(n, 'fluctuation', trend)
n <- 1000
recur_estimates <- test_CPD_efp(n, 'fluctuation', trend)
n <- 5000
recur_estimates <- test_CPD_efp(n, 'fluctuation', trend)
mov_estimates <- test_CPD_efp(n, 'ME', trend, h = 0.05)
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- Fstats(d ~ 1)
res <- sctest(temp)
View(res)
View(res)
res <- sctest(temp, type = c("supF", "aveF", "expF"))
View(res)
res <- sctest(temp, type = "aveF")
View(res)
res <- sctest(temp, type = "expF")
View(res)
View(res)
test_CPD_fstat <- function(n, fun){
p <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- Fstats(d ~ 1)
res <- sctest(temp, type = fun)
p <- c(p, res$p.value)
}
fpr <- sum(p<0.05)/n
cat(paste('False positive rate for efp function ', fun,' is: ', fpr))
return(p)
}
test_CPD_fstat <- function(n){
p_sup <- c()
p_exp <- c()
p_ave <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- Fstats(d ~ 1)
res_sup <- sctest(temp, type = 'supF')
p_sup <- c(p_sup, res_sup$p.value)
res_exp <- sctest(temp, type = 'expF')
p_exp <- c(p_exp, res_exp$p.value)
res_ave <- sctest(temp, type = 'aveF')
p_ave <- c(p_ave, res_ave$p.value)
}
fpr_sup <- sum(p_sup<0.05)/n
cat(paste('False positive rate for supF is: ', fpr_sup))
fpr_exp <- sum(p_exp<0.05)/n
cat(paste('False positive rate for expF is: ', fpr_exp))
fpr_ave <- sum(p_ave<0.05)/n
cat(paste('False positive rate for aveF is: ', fpr_ave))
}
test_CPD_fstat <- function(n){
p_sup <- c()
p_exp <- c()
p_ave <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- Fstats(d ~ 1)
res_sup <- sctest(temp, type = 'supF')
p_sup <- c(p_sup, res_sup$p.value)
res_exp <- sctest(temp, type = 'expF')
p_exp <- c(p_exp, res_exp$p.value)
res_ave <- sctest(temp, type = 'aveF')
p_ave <- c(p_ave, res_ave$p.value)
}
fpr_sup <- sum(p_sup<0.05)/n
cat(paste('False positive rate for supF is: ', fpr_sup))
fpr_exp <- sum(p_exp<0.05)/n
cat(paste('False positive rate for expF is: ', fpr_exp))
fpr_ave <- sum(p_ave<0.05)/n
cat(paste('False positive rate for aveF is: ', fpr_ave))
}
fstat <- test_CPD_fstat(5000)
fstat <- test_CPD_fstat(10000)
# AMOC (changepoint package) ----
#*********************************************************************
library(changepoint)
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- cpt.mean(d, penalty = "Asymptotic", pen.value = 0.05, method = "AMOC",
test.stat = "Normal", class = FALSE)
temp <- cpt.mean(d, penalty = "Asymptotic", pen.value = 0.05, method = "AMOC",
test.stat = "Normal")
View(temp)
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- cpt.mean(d, penalty = "Asymptotic", pen.value = 0.05, method = "AMOC",
test.stat = "Normal", class = FALSE)
temp
temp[2]
temp[2] < 0.05
test_CPD_amoc <- function(n, stat){
p <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- cpt.mean(d, penalty = "Asymptotic", pen.value = 0.05, method = "AMOC",
test.stat = stat, class = FALSE)
p <- c(p, temp[2])
}
fpr <- sum(p<0.05)/n
cat(paste('False positive rate for AMOC ', stat,' is: ', fpr))
return(p)
}
norm_amoc <- test_CPD_amoc(5000,"Normal")
cusum_amoc <- test_CPD_amoc(5000,"CUSUM")
norm_amoc <- test_CPD_amoc(5000,"Normal")
norm_amoc <- test_CPD_amoc(10000,"Normal")
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- cpt.mean(d, penalty = "Asymptotic", pen.value = 0.05, method = "AMOC",
test.stat = "Normal")
summary(temp)
plot(temp)
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- cpt.mean(d, penalty = "null", pen.value = 0.05, method = "AMOC",
test.stat = "Normal")
temp <- cpt.mean(d, penalty = "Manual", pen.value = "null", method = "AMOC",
test.stat = "Normal")
temp <- cpt.mean(d, penalty = "Manual", pen.value = "null likelihood", method = "AMOC",
test.stat = "Normal")
library(trend)
install.packages('trend')
library(trend)
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- pettitt.test(d)
View(temp)
View(temp)
p <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
res <- pettitt.test(d)
p <- c(p, res$p.value)
}
fpr <- sum(p<0.05)/n
cat(paste('False positive rate for efp function ', fun,' is: ', fpr))
cat(paste('False positive rate for pettitts test is: ', fpr))
n <- 10000
p <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
res <- pettitt.test(d)
p <- c(p, res$p.value)
}
fpr <- sum(p<0.05)/n
cat(paste('False positive rate for pettitts test is: ', fpr))
trend <- rep(sin(2*pi*c(0:11)/12),40)
d <- ts(rnorm(12*40,0,.2)+trend, frequency=12, start=c(2000,1))
n <- 10000
p <- c()
for (i in 1:n) {
d <- ts(rnorm(12*40,0,.2)+trend, frequency=12, start=c(2000,1))
res <- pettitt.test(d)
p <- c(p, res$p.value)
}
fpr <- sum(p<0.05)/n
cat(paste('False positive rate for pettitts test is: ', fpr))
sum(ols_cusum<0.05)
# strucchange package ----
#*********************************************************************
library(strucchange)
test_CPD_efp <- function(n, fun, trend, h = NULL){
p <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- efp(d ~ 1, d, type = fun, h = h, rescale = TRUE)
res <-  sctest(temp)
p <- c(p, res$p.value)
}
fpr <- float(sum(p<0.05))/float(n)
cat(paste('False positive rate for efp function ', fun,' is: ', fpr))
return(p)
}
trend <- rep(sin(2*pi*c(0:11)/12),20) #+c(rep(0,12*10),rep(0.5,12*10))
n <- 5000
rec_cusum <- test_CPD_efp(n, 'Rec-CUSUM', trend)
ols_cusum <- test_CPD_efp(n, 'OLS-CUSUM', trend)
test_CPD_efp <- function(n, fun, trend, h = NULL){
p <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- efp(d ~ 1, d, type = fun, h = h, rescale = TRUE)
res <-  sctest(temp)
p <- c(p, res$p.value)
}
fpr <- as.double(sum(p<0.05))/as.double(n)
cat(paste('False positive rate for efp function ', fun,' is: ', fpr))
return(p)
}
ols_cusum <- test_CPD_efp(n, 'OLS-CUSUM', trend)
trend <- rep(sin(2*pi*c(0:11)/12),20) #+c(rep(0,12*10),rep(0.5,12*10))
n <- 5000
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- cpt.mean(d, penalty = "Manual", pen.value = "null likelihood", method = "AMOC",
test.stat = "Normal")
# AMOC (changepoint package) ----
#*********************************************************************
library(changepoint)
temp <- cpt.mean(d, penalty = "Manual", pen.value = "null likelihood", method = "AMOC",
test.stat = "Normal")
temp <- cpt.mean(d, penalty = "Asymptotic", pen.value = 0.05, method = "AMOC",
test.stat = "Normal", class = FALSE)
temp
2.4*e12
2.4*e^2
2.4*10^2
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- cpt.mean(d, penalty = "Asymptotic", pen.value = 0.05, method = "AMOC",
test.stat = "Normal", class = FALSE)
temp
n <-5000
fpr_mean <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
res <- cpt.mean(d, penalty = "Asymptotic", pen.value = 0.05, method = "AMOC",
test.stat = "Normal", class = FALSE)
# in documentation says that it results in NA if no changepoint but it always
# returns 240 as changepoint location which is the last point...
if (res[1] != 240) fpr_mean <- c(fpr_mean, res[1])
}
cat(paste('False positive rate for AMOC mean is ', length(fpr_mean)/n))
n <-10000
fpr_mean <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
res <- cpt.mean(d, penalty = "Asymptotic", pen.value = 0.05, method = "AMOC",
test.stat = "Normal", class = FALSE)
# in documentation says that it results in NA if no changepoint but it always
# returns 240 as changepoint location which is the last point...
if (res[1] != 240) fpr_mean <- c(fpr_mean, res[1])
}
cat(paste('False positive rate for AMOC mean is ', length(fpr_mean)/n))
fpr_var <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
res <- cpt.var(d, penalty = "Asymptotic", pen.value = 0.05, method = "AMOC",
test.stat = "Normal", class = FALSE)
if (res[1] != 240) fpr_var <- c(fpr_var, res[1])
}
cat(paste('False positive rate for AMOC var is ', length(fpr_var)/n))
2*10^-4
fpr_meanvar <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
res <- cpt.meanvar(d, penalty = "Asymptotic", pen.value = 0.05, method = "AMOC",
test.stat = "Normal", class = FALSE)
if (res[1] != 240) fpr_meanvar <- c(fpr_meanvar, res[1])
}
cat(paste('False positive rate for AMOC meanvar is ', length(fpr_meanvar)/n))
fpr_meanvar
n <-10000
fpr_mean <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
res <- cpt.mean(d, penalty = "Asymptotic", pen.value = 0.05, method = "AMOC",
test.stat = "Normal", class = FALSE)
# in documentation says that it results in NA if no changepoint but it always
# returns 240 as changepoint location which is the last point...
if (res[1] != 240) fpr_mean <- c(fpr_mean, res[1])
}
cat(paste('False positive rate for AMOC mean is ', length(fpr_mean)/n))
fpr_var <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
res <- cpt.var(d, penalty = "Asymptotic", pen.value = 0.05, method = "AMOC",
test.stat = "Normal", class = FALSE)
if (res[1] != 240) fpr_var <- c(fpr_var, res[1])
}
cat(paste('False positive rate for AMOC var is ', length(fpr_var)/n))
fpr_meanvar <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
res <- cpt.meanvar(d, penalty = "Asymptotic", pen.value = 0.05, method = "AMOC",
test.stat = "Normal", class = FALSE)
if (res[1] != 240) fpr_meanvar <- c(fpr_meanvar, res[1])
}
cat(paste('False positive rate for AMOC meanvar is ', length(fpr_meanvar)/n))
fpr_meanvar
n <-10000
fpr_mean <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
res <- cpt.mean(d, penalty = "Asymptotic", pen.value = 0.05, method = "AMOC",
test.stat = "Normal", class = FALSE)
# in documentation says that it results in NA if no changepoint but it always
# returns 240 as changepoint location which is the last point...
if (res[1] != 240) fpr_mean <- c(fpr_mean, res[1])
}
cat(paste('False positive rate for AMOC mean is ', length(fpr_mean)/n))
fpr_var <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
res <- cpt.var(d, penalty = "Asymptotic", pen.value = 0.05, method = "AMOC",
test.stat = "Normal", class = FALSE)
if (res[1] != 240) fpr_var <- c(fpr_var, res[1])
}
cat(paste('False positive rate for AMOC var is ', length(fpr_var)/n))
fpr_meanvar <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
res <- cpt.meanvar(d, penalty = "Asymptotic", pen.value = 0.05, method = "AMOC",
test.stat = "Normal", class = FALSE)
if (res[1] != 240) fpr_meanvar <- c(fpr_meanvar, res[1])
}
cat(paste('False positive rate for AMOC meanvar is ', length(fpr_meanvar)/n))
fpr_meanvar
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- gefp(d ~ 1, fit = lm)
# strucchange package ----
#*********************************************************************
library(strucchange)
temp <- gefp(d ~ 1, fit = lm)
res <- sctest(temp, functional = supLM(0.1))
View(res)
View(temp)
View(res)
# Generalized M-Fluctuation Tests
#************
p_LM <- c()
p_maxmo <- c()
n <- 10000
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- gefp(d ~ 1, fit = lm)
res_LM <- sctest(scus, functional = supLM(0.1))
p_LM <- c(p_LM, res_LM$p.value)
res_maxmo <- sctest(scus, functional = maxMOSUM(width = 0.15))
p_maxmo <- c(p_maxmo, res_maxmo$p.value)
}
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- gefp(d ~ 1, fit = lm)
res_LM <- sctest(temp, functional = supLM(0.1))
p_LM <- c(p_LM, res_LM$p.value)
res_maxmo <- sctest(temp, functional = maxMOSUM(width = 0.15))
p_maxmo <- c(p_maxmo, res_maxmo$p.value)
}
fpr_LM <- sum(p_LM<0.05)/n
cat(paste('False positive rate for supLM is: ', fpr_LM))
fpr_maxmo <- sum(p_maxmo<0.05)/n
cat(paste('False positive rate for maximum MOSUM is: ', fpr_maxmo))
# Generalized M-Fluctuation Tests
#************
p_LM <- c()
p_maxmo <- c()
n <- 10000
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
temp <- gefp(d ~ 1, fit = lm)
res_LM <- sctest(temp, functional = supLM(0.05))
p_LM <- c(p_LM, res_LM$p.value)
res_maxmo <- sctest(temp, functional = maxMOSUM(width = 0.05))
p_maxmo <- c(p_maxmo, res_maxmo$p.value)
}
install.packages("mcp")
install.packages("cpm")
# cpm package ----
#*********************************************************************
library(cpm)
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
fit_cpm <- processStream(d, cpmType = "Student")
View(fit_cpm)
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
fit_cpm <- processStream(d, cpmType = "Student")
fit_cpm
test_CPD_cpm <- function(n, fun, trend, h = NULL){
ti <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
res <- processStream(d, cpmType = fun)
if (!is.null(res$changePoints)) ti <- c(ti, res$changePoints)
}
fpr <- length(ti)/n
cat(paste('False positive rate for efp function ', fun,' is: ', fpr))
return(p)
}
n <- 1000
test_CPD_cpm(n, 'Student', trend)
test_CPD_cpm <- function(n, fun, trend){
ti <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
res <- processStream(d, cpmType = fun)
if (!is.null(res$changePoints)) ti <- c(ti, res$changePoints)
}
fpr <- length(ti)/n
cat(paste('False positive rate for efp function ', fun,' is: ', fpr))
}
n <- 10000
test_CPD_cpm(n, 'Student', trend)
test_CPD_cpm <- function(n, fun, trend){
bp <- c()
for (i in 1:n) {
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
res <- processStream(d, cpmType = fun)
bp <- c(bp, res$changePoints)
}
fpr <- sum(bp != 0)/n
cat(paste('False positive rate for efp function ', fun,' is: ', fpr))
return(bp)
}
n <- 10000
stud <- test_CPD_cpm(n, 'Student', trend)
stud
exp <- test_CPD_cpm(n, 'Exponential', trend)
n <- 10000
bart <- test_CPD_cpm(n, 'Bartlett', trend)
glr <- test_CPD_cpm(n, 'GLR', trend)
exp <- test_CPD_cpm(n, 'Exponential', trend)
glr_adj <- test_CPD_cpm(n, 'GLRAdjusted', trend)
exp_adj <- test_CPD_cpm(n, 'ExponentialAdjusted', trend)
fet <- test_CPD_cpm(n, 'FET', trend)
mw <- test_CPD_cpm(n, 'Mann-Whitney', trend)
mood <- test_CPD_cpm(n, 'Mood', trend)
lep <- test_CPD_cpm(n, 'Lepage', trend)
ks <- test_CPD_cpm(n, 'Kolmogorov-Smirnov', trend)
