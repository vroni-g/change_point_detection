for (i in 1:length(clusters_sep$cluster.count)){ # retrieve maximum of each cluster
clust_max <- data[clusters_sep$clusters==i] %>%
max(.,na.rm = TRUE)
clusters_sep$cluster.max <- clust_max # assign each cluster its maximum
allcluster_max <- c(allcluster_max, clust_max)
}
stcs_maxT_all <- max(allcluster_max, na.rm = TRUE)
View(clusters_sep)
clusters_sep$cluster.max <- vector(mode = "list", length = length(clusters_pos$cluster.count))
View(clusters_sep)
for (i in 1:length(clusters_sep$cluster.count)){ # retrieve maximum of each cluster
clust_max <- data[clusters_sep$clusters==i] %>%
max(.,na.rm = TRUE)
clusters_sep$cluster.max[i] <- clust_max # assign each cluster its maximum
allcluster_max <- c(allcluster_max, clust_max)
}
stcs_maxT_all <- max(allcluster_max, na.rm = TRUE)
View(clusters_sep)
clusters_sep$cluster.max <- vector(length = length(clusters_pos$cluster.count))
for (i in 1:length(clusters_sep$cluster.count)){ # retrieve maximum of each cluster
clust_max <- data[clusters_sep$clusters==i] %>%
max(.,na.rm = TRUE)
clusters_sep$cluster.max[i] <- clust_max # assign each cluster its maximum
allcluster_max <- c(allcluster_max, clust_max)
}
stcs_maxT_all <- max(allcluster_max, na.rm = TRUE)
View(clusters_sep)
# SCRIPT FOR TESTING FUNCTIONS
library("devtools")
load_all()
# ADDITIONAL NEEDED LIBRARIES
library(tidyverse) # for pipe: %>%
library(fields) # for nicer basic plotting: image.plot
# GENERAL SETTINGS
str(temp_gistemp)
data=temp_gistemp
fx=sample_mk_function
method="all"
nperm=10
alpha_local=0.05
alpha_global=0.05
null_distribution="normal" # defines if threshold based on alpha level is drawn from normal or t distribution
seed=NULL
block_size=NULL
verbose=TRUE
# test results for nperm=1000, detrended data
# saveRDS(perm_results, file = "testing/detrended_temp_data_nperm_1000.rds")
perm_results<- readRDS("testing/detrended_temp_data_nperm_1000.rds")
str(perm_results)
perm_results$stcs_maxT[!is.finite(perm_results$stcs_maxT)] <- 0
View(perm_results)
perm_results$stcs
plot(perm_results$stcs)
hits(perm_results$stcs)
hist(perm_results$stcs)
dis <- ecdf(perm_results$stcs)
dis(7)
dis(1400)
dis <- ecdf(perm_results$stcs_maxT)
hist(perm_results$stcs_maxT)
dis(1)
dis(1.2)
dis(2)
perm_results$stcs_maxT
dis(2.112)
source('~/Documents/UNIVERSIDAD/Jena/MA/code/change_point_detection/R/perm_dist.R')
x <- c(1,2,3,4,5,6,7,8,9,10)
which(x > 5)
which(x > 5, arr.ind = TRUE)
which(x > 5, arr.ind = FALSE)
x>5
# test results for nperm=1000, detrended data
# saveRDS(perm_results, file = "testing/detrended_temp_data_nperm_1000.rds")
perm_results<- readRDS("testing/detrended_temp_data_nperm_1000.rds")
str(perm_results)
perm_results$stcs_maxT[!is.finite(perm_results$stcs_maxT)] <- 0
stcs_thr<- quantile(perm_results$stcs, 1-alpha_global, na.rm = TRUE)
wh_cluster<- which(tmp$clusters$cluster.count > stcs_thr)
# test results for nperm=1000, detrended data
# saveRDS(perm_results, file = "testing/detrended_temp_data_nperm_1000.rds")
perm_results<- readRDS("testing/detrended_temp_data_nperm_1000.rds")
str(perm_results)
perm_results$stcs_maxT[!is.finite(perm_results$stcs_maxT)] <- 0
# code from threshold_data.R:
tmp<- get_stcs(data=perm_results$original_results, alpha_local=alpha_local, null_distribution=null_distribution)
fx=sample_mk_function
method="all"
nperm=10
alpha_local=0.05
alpha_global=0.05
null_distribution="normal" # defines if threshold based on alpha level is drawn from normal or t distribution
seed=NULL
block_size=NULL
verbose=TRUE
# code from threshold_data.R:
tmp<- get_stcs(data=perm_results$original_results, alpha_local=alpha_local, null_distribution=null_distribution)
stcs_thr<- quantile(perm_results$stcs, 1-alpha_global, na.rm = TRUE)
wh_cluster<- which(tmp$clusters$cluster.count > stcs_thr)
wh_cluster
}
data=temp_gistemp
# detrend data ----
#***********************
sen0 <- function(y,x){
zyp.slopediff <- function(i, xx, yy, n) (yy[1:(n - i)] - yy[(i + 1):n])/(xx[1:(n - i)] - xx[(i + 1):n])
n <- length(y)
if (missing(x)) x <- c(1:n)
slopes <- unlist(lapply(1:(n - 1), zyp.slopediff, x, y, n))
return(median(slopes[is.finite(slopes)], na.rm=TRUE))
}
data_detrend<- data %>% apply(1:2, # apply(1:2,...) will apply function to every cell
function(x)
{
(x- 1:length(x)*sen0(x))
}
)
data_detrend <-  aperm(data_detrend, c(2,3,1)) # transpose it to put lat & long in the first dimensions again
# set options ----
#***********************
fx=sample_mk_function
method="all"
nperm=4
alpha_local=0.05
alpha_global=0.05
null_distribution="normal" # defines if threshold based on alpha level is drawn from normal or t distribution
seed=NULL
block_size=NULL
verbose=TRUE
data=data_detrend
# perm_dist ----
#***********************
perm_matrix<- perm_matrix(nobs = dim(data)[3], nperm = nperm, block_size = block_size, seed = seed)
maxT<- vector(length = nperm)
stcs<- vector(length = nperm)
stcs_maxT_all<- vector(length = nperm)
# get_stcs step by step ----
#***********************
tmp<- apply(data[,,perm_matrix[3,]], 1:2, fx)
data = tmp
if(null_distribution == "normal") thr<- qnorm(1-alpha_local/2)
if(null_distribution == "t") thr<- qt(1-alpha_local/2, df = data_dim[3]-2)
pixel_sign<- sign(data)
pixel_significant<- abs(data)>thr
pixel_result<- pixel_sign*pixel_significant
# positive
pixel_result_pos<- pixel_result
pixel_result_pos[is.na(pixel_result_pos)]<- -999
clusters_pos<- osc::cca(pixel_result_pos,count.cells = TRUE, s=1, mode = 2, # only values >0 are included in osc:cca
count.max  = length(pixel_sign))
stcs_pos<- max(clusters_pos$cluster.count)
nclust_pos<- length(clusters_pos$cluster.count)
clusters_sep<- vector(mode = "list", length = 2)
# negative
pixel_result_neg<- pixel_result
pixel_result_neg[pixel_result_neg == -1] = 10 # swap signs so that originally negative values will now be considered in osc:cca
pixel_result_neg[pixel_result_neg == 1] = -10
pixel_result_neg[is.na(pixel_result_neg)] = -999
clusters_neg<- osc::cca(pixel_result_neg,count.cells = TRUE, s=1, mode = 2,
count.max = length(pixel_sign))
stcs_neg<- max(clusters_neg$cluster.count)
# join
clusters_neg$clusters[clusters_neg$clusters > 0]<- clusters_neg$clusters[clusters_neg$clusters > 0] + nclust_pos
clusters_sep[[1]]<- clusters_pos$clusters + clusters_neg$clusters
clusters_sep[[2]]<- c(clusters_pos$cluster.count, clusters_neg$cluster.count)
names(clusters_sep)<- c("clusters", "cluster.count")
# GENERAL SETTINGS
str(temp_gistemp)
data=temp_gistemp
fx=sample_mk_function
method="all"
nperm=10
alpha_local=0.05
alpha_global=0.05
null_distribution="normal" # defines if threshold based on alpha level is drawn from normal or t distribution
seed=NULL
block_size=NULL
verbose=TRUE
# detrend the data and try! -> check false positive rate
sen0 <- function(y,x){
zyp.slopediff <- function(i, xx, yy, n) (yy[1:(n - i)] - yy[(i + 1):n])/(xx[1:(n - i)] - xx[(i + 1):n])
n <- length(y)
if (missing(x)) x <- c(1:n)
slopes <- unlist(lapply(1:(n - 1), zyp.slopediff, x, y, n))
return(median(slopes[is.finite(slopes)], na.rm=TRUE))
}
data_detrend<- data %>% apply(1:2, # apply(1:2,...) will apply function to every cell
function(x)
{
(x- 1:length(x)*sen0(x))
}
)
data_detrend<-  aperm(data_detrend, c(2,3,1)) # transpose it to put lat & long in the first dimensions again
# perm_dist performs obtains the permutation distribution for maxT, STCS and others specified in the respective functions
# perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
#                          alpha_global=alpha_global, null_distribution=null_distribution,
#                          seed=seed, block_size=block_size, verbose=verbose)
#*******************************************************************************
# test new perm_dist
#*******************************************************************************
nperm = 4
perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
cat("permutations",i,"\n")
i =1
cat("permutations",i,"\n")
load_all()
perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
load_all()
perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
load_all()
perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
warnings()
View(perm_results)
# perm_dist ----
#***********************
perm_matrix<- perm_matrix(nobs = dim(data)[3], nperm = nperm, block_size = block_size, seed = seed)
View(perm_matrix)
m <- perm_matrix[1:3]
m <- perm_matrix[1:3][1:68]
m <- perm_matrix[1:3, 1:68]
dim(m)
dim(m[2])
dim(m)[2]
nperm <- nperm - 1
perm_matrix <- perm_matrix[1:nperm, 1:dim(perm_matrix)[2]]
View(perm_matrix)
load_all()
# perm_dist performs obtains the permutation distribution for maxT, STCS and others specified in the respective functions
# perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
#                          alpha_global=alpha_global, null_distribution=null_distribution,
#                          seed=seed, block_size=block_size, verbose=verbose)
#*******************************************************************************
# test new perm_dist
#*******************************************************************************
nperm = 6
perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
View(perm_results)
perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
View(perm_results)
load_all()
load_all()
# perm_dist performs obtains the permutation distribution for maxT, STCS and others specified in the respective functions
# perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
#                          alpha_global=alpha_global, null_distribution=null_distribution,
#                          seed=seed, block_size=block_size, verbose=verbose)
#*******************************************************************************
# test new perm_dist
#*******************************************************************************
nperm = 6
perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
View(perm_results)
View(perm_results)
load_all()
View(perm_results)
perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
load_all()
perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
View(perm_results)
load_all()
perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
View(perm_results)
load_all()
# perm_dist performs obtains the permutation distribution for maxT, STCS and others specified in the respective functions
# perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
#                          alpha_global=alpha_global, null_distribution=null_distribution,
#                          seed=seed, block_size=block_size, verbose=verbose)
#*******************************************************************************
# test new perm_dist
#*******************************************************************************
nperm = 10
perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
View(perm_results)
View(perm_results)
perm_results$nmbr_cluster
load_all()
# perm_dist performs obtains the permutation distribution for maxT, STCS and others specified in the respective functions
# perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
#                          alpha_global=alpha_global, null_distribution=null_distribution,
#                          seed=seed, block_size=block_size, verbose=verbose)
#*******************************************************************************
# test new perm_dist
#*******************************************************************************
nperm = 6
perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
load_all()
perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
load_all()
perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
View(perm_results)
load_all()
# perm_dist performs obtains the permutation distribution for maxT, STCS and others specified in the respective functions
# perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
#                          alpha_global=alpha_global, null_distribution=null_distribution,
#                          seed=seed, block_size=block_size, verbose=verbose)
#*******************************************************************************
# test new perm_dist
#*******************************************************************************
nperm = 4
perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
View(perm_results)
load_all()
perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
load_all()
perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
View(perm_results)
cl <- perm_results$raw_results
View(cl)
cl[1]$cluster.count
View(cl)
cl[[1]]$cluster.count
load_all()
# perm_dist performs obtains the permutation distribution for maxT, STCS and others specified in the respective functions
# perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
#                          alpha_global=alpha_global, null_distribution=null_distribution,
#                          seed=seed, block_size=block_size, verbose=verbose)
#*******************************************************************************
# test new perm_dist
#*******************************************************************************
nperm = 5
perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
View(perm_results)
View(perm_results)
load_all()
perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
load_all()
# GENERAL SETTINGS
str(temp_gistemp)
data=temp_gistemp
fx=sample_mk_function
method="all"
nperm=10
alpha_local=0.05
alpha_global=0.05
null_distribution="normal" # defines if threshold based on alpha level is drawn from normal or t distribution
seed=NULL
block_size=NULL
verbose=TRUE
# detrend the data and try! -> check false positive rate
sen0 <- function(y,x){
zyp.slopediff <- function(i, xx, yy, n) (yy[1:(n - i)] - yy[(i + 1):n])/(xx[1:(n - i)] - xx[(i + 1):n])
n <- length(y)
if (missing(x)) x <- c(1:n)
slopes <- unlist(lapply(1:(n - 1), zyp.slopediff, x, y, n))
return(median(slopes[is.finite(slopes)], na.rm=TRUE))
}
data_detrend<- data %>% apply(1:2, # apply(1:2,...) will apply function to every cell
function(x)
{
(x- 1:length(x)*sen0(x))
}
)
data_detrend<-  aperm(data_detrend, c(2,3,1)) # transpose it to put lat & long in the first dimensions again
# perm_dist performs obtains the permutation distribution for maxT, STCS and others specified in the respective functions
# perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
#                          alpha_global=alpha_global, null_distribution=null_distribution,
#                          seed=seed, block_size=block_size, verbose=verbose)
#*******************************************************************************
# test new perm_dist
#*******************************************************************************
nperm = 50
perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
View(perm_results)
perm_results$original_wt
tmp<- get_stcs(data=perm_results$original_results, alpha_local=alpha_local, null_distribution=null_distribution)
stcs_thr<- quantile(perm_results$stcs, 1-alpha_global, na.rm = TRUE)
wh_cluster<- which(tmp$clusters$cluster.count > stcs_thr)
wh_cluster_sel<- tmp$clusters$clusters %in% wh_cluster
out$stcs<- apply(tmp$clusters$clusters, 1:2, function(x, wh_cluster) x %in% wh_cluster, wh_cluster)
out<- list()
out$stcs<- apply(tmp$clusters$clusters, 1:2, function(x, wh_cluster) x %in% wh_cluster, wh_cluster)
View(out)
# using both stcs and maxT in stcs
stcs_thr<- quantile(perm_results$stcs, 1-alpha_global/2, na.rm = TRUE)
stcs_maxT_thr<- quantile(perm_results$stcs_maxT, 1-alpha_global/2, na.rm = TRUE)
wh_cluster_stcs<- which(tmp$clusters$cluster.count > stcs_thr)
stcs_maxT<- vector(length=length(tmp$clusters$cluster.count))
for (i in 1:length(tmp$clusters$cluster.count)) stcs_maxT[i]<- max(abs(data[tmp$clusters$clusters==i]), na.rm = TRUE)
wh_cluster_stcs_maxT<- which(stcs_maxT > stcs_maxT_thr)
wh_cluster_sel<- tmp$clusters$clusters %in% c(wh_cluster_stcs, wh_cluster_stcs_maxT)
out$stcs_maxT<- apply(tmp$clusters$clusters, 1:2, function(x, wh_cluster)  x %in% wh_cluster, wh_cluster=unique(c(wh_cluster_stcs, wh_cluster_stcs_maxT)))
View(out)
out$stcs_maxT<- apply(tmp$clusters$clusters, 1:2, function(x, wh_cluster)  x %in% wh_cluster, wh_cluster=unique(c(wh_cluster_stcs, wh_cluster_stcs_maxT)))
View(out)
# combining function of stcs and stcs_maxT_all
wt_thr <- quantile(perm_results$wt, 1-alpha_global, na.rm = TRUE)
#tmp$clusters$w_stat <- perm_results$original_wt
wh_cluster_wt <- which(perm_results$original_wt > wt_thr)
wh_cluster_sel <- tmp$clusters$clusters %in% wh_cluster_wt
out$Wt<- apply(tmp$clusters$clusters, 1:2, function(x, wh_cluster) x %in% wh_cluster, wh_cluster)
View(out)
View(out)
out$Wt<- apply(tmp$clusters$clusters, 1:2, function(x, wh_cluster_wt) x %in% wh_cluster_wt, wh_cluster_wt)
View(out)
load_all()
perm_results_old <- perm_results
# perm_dist performs obtains the permutation distribution for maxT, STCS and others specified in the respective functions
# perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
#                          alpha_global=alpha_global, null_distribution=null_distribution,
#                          seed=seed, block_size=block_size, verbose=verbose)
#*******************************************************************************
# test new perm_dist
#*******************************************************************************
nperm = 20
perm_results <- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
View(perm_results)
View(perm_results)
perm_results$wt
perm_results$wt[!is.finite(perm_results$wt)] <- 0
perm_results$wt
out<- list()
tmp<- get_stcs(data=perm_results$original_results, alpha_local=alpha_local, null_distribution=null_distribution)
stcs_thr<- quantile(perm_results$stcs, 1-alpha_global, na.rm = TRUE)
wh_cluster<- which(tmp$clusters$cluster.count > stcs_thr)
stcs_maxT_thr<- quantile(perm_results$stcs_maxT, 1-alpha_global/2, na.rm = TRUE)
wh_cluster_stcs<- which(tmp$clusters$cluster.count > stcs_thr)
stcs_maxT<- vector(length=length(tmp$clusters$cluster.count))
for (i in 1:length(tmp$clusters$cluster.count)) stcs_maxT[i]<- max(abs(data[tmp$clusters$clusters==i]), na.rm = TRUE)
wh_cluster_stcs_maxT<- which(stcs_maxT > stcs_maxT_thr)
wh_cluster_sel<- tmp$clusters$clusters %in% c(wh_cluster_stcs, wh_cluster_stcs_maxT)
out$stcs_maxT<- apply(tmp$clusters$clusters, 1:2, function(x, wh_cluster)  x %in% wh_cluster, wh_cluster=unique(c(wh_cluster_stcs, wh_cluster_stcs_maxT)))
# combining function of stcs and stcs_maxT_all
wt_thr <- quantile(perm_results$wt, 1-alpha_global, na.rm = TRUE)
#tmp$clusters$w_stat <- perm_results$original_wt
wh_cluster_wt <- which(perm_results$original_wt > wt_thr)
wh_cluster_sel <- tmp$clusters$clusters %in% wh_cluster_wt
out$Wt<- apply(tmp$clusters$clusters, 1:2, function(x, wh_cluster_wt) x %in% wh_cluster_wt, wh_cluster_wt)
View(out)
out$stcs<- apply(tmp$clusters$clusters, 1:2, function(x, wh_cluster) x %in% wh_cluster, wh_cluster)
# using both stcs and maxT in stcs
stcs_thr<- quantile(perm_results$stcs, 1-alpha_global/2, na.rm = TRUE)
stcs_maxT_thr<- quantile(perm_results$stcs_maxT, 1-alpha_global/2, na.rm = TRUE)
wh_cluster_stcs<- which(tmp$clusters$cluster.count > stcs_thr)
stcs_maxT<- vector(length=length(tmp$clusters$cluster.count))
for (i in 1:length(tmp$clusters$cluster.count)) stcs_maxT[i]<- max(abs(data[tmp$clusters$clusters==i]), na.rm = TRUE)
wh_cluster_stcs_maxT<- which(stcs_maxT > stcs_maxT_thr)
wh_cluster_sel<- tmp$clusters$clusters %in% c(wh_cluster_stcs, wh_cluster_stcs_maxT)
out$stcs_maxT<- apply(tmp$clusters$clusters, 1:2, function(x, wh_cluster)  x %in% wh_cluster, wh_cluster=unique(c(wh_cluster_stcs, wh_cluster_stcs_maxT)))
# combining function of stcs and stcs_maxT_all
wt_thr <- quantile(perm_results$wt, 1-alpha_global, na.rm = TRUE)
#tmp$clusters$w_stat <- perm_results$original_wt
wh_cluster_wt <- which(perm_results$original_wt > wt_thr)
#wh_cluster_sel <- tmp$clusters$clusters %in% wh_cluster_wt
out$Wt<- apply(tmp$clusters$clusters, 1:2, function(x, wh_cluster_wt) x %in% wh_cluster_wt, wh_cluster_wt)
View(out)
load_all()
perm_results <- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
perm_results$wt
out<- list()
tmp<- get_stcs(data=perm_results$original_results, alpha_local=alpha_local, null_distribution=null_distribution)
stcs_thr<- quantile(perm_results$stcs, 1-alpha_global, na.rm = TRUE)
wh_cluster<- which(tmp$clusters$cluster.count > stcs_thr)
wh_cluster_sel<- tmp$clusters$clusters %in% wh_cluster
out$stcs<- apply(tmp$clusters$clusters, 1:2, function(x, wh_cluster) x %in% wh_cluster, wh_cluster)
# using both stcs and maxT in stcs
stcs_thr<- quantile(perm_results$stcs, 1-alpha_global/2, na.rm = TRUE)
stcs_maxT_thr<- quantile(perm_results$stcs_maxT, 1-alpha_global/2, na.rm = TRUE)
wh_cluster_stcs<- which(tmp$clusters$cluster.count > stcs_thr)
stcs_maxT<- vector(length=length(tmp$clusters$cluster.count))
for (i in 1:length(tmp$clusters$cluster.count)) stcs_maxT[i]<- max(abs(data[tmp$clusters$clusters==i]), na.rm = TRUE)
wh_cluster_stcs_maxT<- which(stcs_maxT > stcs_maxT_thr)
wh_cluster_sel<- tmp$clusters$clusters %in% c(wh_cluster_stcs, wh_cluster_stcs_maxT)
out$stcs_maxT<- apply(tmp$clusters$clusters, 1:2, function(x, wh_cluster)  x %in% wh_cluster, wh_cluster=unique(c(wh_cluster_stcs, wh_cluster_stcs_maxT)))
# combining function of stcs and stcs_maxT_all
wt_thr <- quantile(perm_results$wt, 1-alpha_global, na.rm = TRUE)
#tmp$clusters$w_stat <- perm_results$original_wt
wh_cluster_wt <- which(perm_results$original_wt > wt_thr)
#wh_cluster_sel <- tmp$clusters$clusters %in% wh_cluster_wt
out$Wt<- apply(tmp$clusters$clusters, 1:2, function(x, wh_cluster_wt) x %in% wh_cluster_wt, wh_cluster_wt)
View(out)
