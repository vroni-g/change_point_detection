p <- c(p, res$p.value)
}
fpr <- sum(p<0.05)/n
cat(paste('False positive rate for pettitts test is: ', fpr)) # is 0
score_cusum <- test_CPD_efp(n, 'Score-CUSUM', trend)
install.packages('segmented')
# segmented package ----
#*********************************************************************
library(segmented)
fit <-lm(d~1)
davies.test(fit)
davies.test(fit, ~d)
davies.test(fit, ~1)
View(fit)
davies.test(fit)
pscore.test(fit)
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
d
df <- data.frame(d)
View(df)
install.packages('TSstudio')
library(TSstudio)
df <- ts_reshape(d, type='long')
View(df)
d <- ts(rnorm(12*20,0,.2)+trend, frequency=1, start=c(1780))
d
df <- ts_reshape(d, type='long')
df <- ts_reshape(d, type='wide')
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000, 1))
df <- ts_reshape(d, type='wide')
View(df)
df <- ts_reshape(d, type='long')
library(magrittr)
library(tidyverse)
View(df)
df <- df %>% mutate(.,
time = paste(month, '-', year),
.keep='unused')
View(df)
seg <- segmented(lm(value ~ 1, data = df), ~ time)
#d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
d <- rnorm(12*20,0,.2)+trend
#d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
x <- w <- rnorm(12*20,0,.2)+trend
for (t in 2:240) x[t] <- x[t-1]*0.5 + w[t]
plot(x, type="l")
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
plot(d)
for (t in 2:240) x[t] <- x[t-1]*0.5 + w[t]
plot(x, type="l")
acf(x)
acf(d)
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
acf(d)
acf(x)
x <- w <- rnorm(trend)
x <- w <- rnorm(1000)
for (t in 2:1000) x[t] <- x[t-1]*0.5 + w[t]
plot(x, type="l")
acf(x)
x <- w <- rnorm(1000)
for (t in 2:1000) x[t] <- x[t-1] + w[t]
plot(x, type="l")
acf(x)
x <- w <- rnorm(240)
for (t in 2:240) x[t] <- x[t-1] + w[t]
plot(x, type="l")
acf(x)
trend <- rep(sin(2*pi*c(0:11)/12),20) #+c(rep(0,12*10),rep(0.5,12*10))
d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
trend <- rep(sin(2*pi*c(0:11)/12),40) #+c(rep(0,12*10),rep(0.5,12*10))
d <- ts(rnorm(12*40,0,.2)+trend, frequency=12, start=c(1980,1))
d
df <- ts_reshape(d, type='long')
View(df)
means <- df %>%
group_by(year) %>%
summarise(annuak_mean = mean(value)) %>%
# acf(d)
# x <- w <- rnorm(240)
# for (t in 2:240) x[t] <- x[t-1] + w[t]
# plot(x, type="l")
# acf(x)
n <- 10000
# simulation to check FPR of change point detection methods
library(tidyverse)
means <- df %>%
group_by(year) %>%
summarise(annuak_mean = mean(value)) %>%
# acf(d)
# x <- w <- rnorm(240)
# for (t in 2:240) x[t] <- x[t-1] + w[t]
# plot(x, type="l")
# acf(x)
n <- 10000
means <- df %>%
group_by(year) %>%
summarise(annual_mean = mean(value))
View(means)
plot(means)
plot(means, type ='l')
trend <- rep(sin(2*pi*c(0:11)/12),200) #+c(rep(0,12*10),rep(0.5,12*10))
d <- ts(rnorm(12*200,0,.2)+trend, frequency=12, start=c(1800,1))
df <- ts_reshape(d, type='long')
means <- d %>%
ts_reshape(type='long') %>%
group_by(year) %>%
summarise(annual_mean = mean(value))
View(means)
means <- d %>%
ts_reshape(type='long') %>%
group_by(year) %>%
summarise(annual_mean = mean(value)) %>%
ts(frequency = 1, start(1800))
means
annual_means <- function(trend){
d <- ts(rnorm(12*200,0,.2)+trend, frequency=12, start=c(1800,1))
means <- d %>%
ts_reshape(type='long') %>%
group_by(year) %>%
summarise(annual_mean = mean(value)) %>%
ts(frequency = 1, start(1800))
return(means)
}
n <- 10000
# strucchange package ----
#*********************************************************************
library(strucchange)
n <- 10000
# Generalized fluctuation tests
#************
test_CPD_efp <- function(n, fun, trend, h = NULL){
p <- c()
for (i in 1:n) {
#d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
d <- annual_means(trend)
temp <- efp(d ~ 1, d, type = fun, h = h, rescale = TRUE)
res <-  sctest(temp)
p <- c(p, res$p.value)
}
fpr <- as.double(sum(p<0.05))/as.double(n)
cat(paste('False positive rate for efp function ', fun,' is: ', fpr))
return(p)
}
n <- 10000
ols_cusum <- test_CPD_efp(n, 'OLS-CUSUM', trend)
# simulation to check FPR of change point detection methods
library(tidyverse)
#trend <- rep(sin(2*pi*c(0:11)/12),20)
trend <- rep(sin(2*pi*c(0:11)/12),200) #+c(rep(0,12*10),rep(0.5,12*10))
annual_means <- function(trend){
d <- ts(rnorm(12*200,0,.2)+trend, frequency=12, start=c(1800,1))
means <- d %>%
ts_reshape(type='long') %>%
group_by(year) %>%
summarise(annual_mean = mean(value)) %>%
ts(frequency = 1, start(1800))
return(means)
}
# Generalized fluctuation tests
#************
test_CPD_efp <- function(n, fun, trend, h = NULL){
p <- c()
for (i in 1:n) {
#d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
d <- annual_means(trend)
temp <- efp(d ~ 1, d, type = fun, h = h, rescale = TRUE)
res <-  sctest(temp)
p <- c(p, res$p.value)
}
fpr <- as.double(sum(p<0.05))/as.double(n)
cat(paste('False positive rate for efp function ', fun,' is: ', fpr))
return(p)
}
n <- 10000
ols_cusum <- test_CPD_efp(n, 'OLS-CUSUM', trend)
ols_cusum
n <- 5000
ols_mosum <- test_CPD_efp(n, 'OLS-MOSUM', trend, h = 0.01)
d <- ts(rnorm(12*200,0,.2)+trend, frequency=12, start=c(1800,1))
plot(d, type = 'l')
m <- annual_means(trend)
plot(m, add = TRUE)
plot(d, type = 'l')
plot(m, type = 'l')
m
annual_means <- function(trend){
d <- ts(rnorm(12*200,0,.2)+trend, frequency=12, start=c(1800,1))
means <- d %>%
ts_reshape(type='long') %>%
group_by(year) %>%
summarise(annual_mean = mean(value))
m <- ts(means['annual_mean'],frequency = 1, start(1800))
return(means)
}
m <- annual_means(trend)
m
annual_means <- function(trend){
d <- ts(rnorm(12*200,0,.2)+trend, frequency=12, start=c(1800,1))
means <- d %>%
ts_reshape(type='long') %>%
group_by(year) %>%
summarise(annual_mean = mean(value))
m <- ts(as.vector(means['annual_mean']),frequency = 1, start(1800))
return(means)
}
m <- annual_means(trend)
m
annual_means <- function(trend){
d <- ts(rnorm(12*200,0,.2)+trend, frequency=12, start=c(1800,1))
means <- d %>%
ts_reshape(type='long') %>%
group_by(year) %>%
summarise(annual_mean = mean(value))
m <- ts(means$annual_mean,frequency = 1, start(1800))
return(m)
}
m <- annual_means(trend)
plot(d, type = 'l')
plot(m, type = 'l')
plot(d, type = 'l')
plot(m, type = 'l', add = TRUE, col = 'red')
plot(d, type = 'l')
plot(d, type = 'l')
lines(m, col = 'red')
plot(m,type = 'l', col = 'red')
plot(d, type = 'l')
lines(m,col = 'red')
plot(d, type = 'l', col = 'grey')
m <- annual_means(trend)
lines(m,col = 'red')
# simulation to check FPR of change point detection methods
library(tidyverse)
#trend <- rep(sin(2*pi*c(0:11)/12),20)
trend <- rep(sin(2*pi*c(0:11)/12),200) #+c(rep(0,12*10),rep(0.5,12*10))
d <- ts(rnorm(12*200,0,.2)+trend, frequency=12, start=c(1800,1))
plot(d, type = 'l', col = 'grey')
m <- annual_means(trend)
library(TSstudio)
m <- annual_means(trend)
lines(m,col = 'red')
plot(m,col = 'red')
dr <- ts(rnorm(12*20,0,.2), frequency=12, start=c(2000,1))
plot(dr, type='l')
plot(m,col = 'red')
plot(dr, type='l')
plot(m,col = 'red')
n <- 5000
# strucchange package ----
#*********************************************************************
library(strucchange)
# Generalized fluctuation tests
#************
test_CPD_efp <- function(n, fun, trend, h = NULL){
p <- c()
for (i in 1:n) {
#d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
d <- annual_means(trend)
temp <- efp(d ~ 1, d, type = fun, h = h, rescale = TRUE)
res <-  sctest(temp)
p <- c(p, res$p.value)
}
fpr <- as.double(sum(p<0.05))/as.double(n)
cat(paste('False positive rate for efp function ', fun,' is: ', fpr))
return(p)
}
n <- 5000
# residual based:
rec_cusum <- test_CPD_efp(n, 'Rec-CUSUM', trend)
ols_cusum <- test_CPD_efp(n, 'OLS-CUSUM', trend) # annual mean: ,random data:
score_cusum <- test_CPD_efp(n, 'Score-CUSUM', trend)
# tried different window sizes from 0.01 to 0.3 but always FPR = 0
rec_mosum <- test_CPD_efp(n, 'Rec-MOSUM', trend, h = 0.01) # annual mean: ,random data:
ols_mosum <- test_CPD_efp(n, 'OLS-MOSUM', trend, h = 0.01) # annual mean: ,random data:
# estimates based:
recur_estimates <- test_CPD_efp(n, 'RE', trend) # annual mean: ,random data:
mov_estimates <- test_CPD_efp(n, 'ME', trend, h = 0.05)
# F Statistics (compares model fits for whole series vs. two segments; iterates over whole series as possible break points)
#************
p_sup <- c()
p_exp <- c()
p_ave <- c()
for (i in 1:n) {
#d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
d <- annual_means(trend)
#d <- ts(rnorm(12*20,0,.2), frequency=12, start=c(2000,1))
temp <- Fstats(d ~ 1)
res_sup <- sctest(temp, type = 'supF')
p_sup <- c(p_sup, res_sup$p.value)
res_exp <- sctest(temp, type = 'expF')
p_exp <- c(p_exp, res_exp$p.value)
res_ave <- sctest(temp, type = 'aveF')
p_ave <- c(p_ave, res_ave$p.value)
}
fpr_sup <- sum(p_sup<0.05)/n # is 0 # annual mean: 0., random data (no season):
cat(paste('False positive rate for supF is: ', fpr_sup))
fpr_exp <- sum(p_exp<0.05)/n # is 0 # annual mean: 0., random data (no season):
cat(paste('False positive rate for expF is: ', fpr_exp))
fpr_ave <- sum(p_ave<0.05)/n # is 0 # annual mean: 0., random data (no season):
cat(paste('False positive rate for aveF is: ', fpr_ave))
fpr_mean <- c()
for (i in 1:n) {
#d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
d <- annual_means(trend)
#d <- ts(rnorm(12*20,0,.2), frequency=12, start=c(2000,1))
res <- cpt.mean(d, penalty = "Asymptotic", pen.value = 0.05, method = "AMOC",
test.stat = "Normal", class = FALSE)
# in documentation says that it results in NA if no changepoint but it often
# returns 240 as changepoint location which is the last point, so only include results unlike 240
if (res[1] != 240) fpr_mean <- c(fpr_mean, res[1])
}
# AMOC (changepoint package) ----
# at most one change
#*********************************************************************
library(changepoint)
fpr_mean <- c()
for (i in 1:n) {
#d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
d <- annual_means(trend)
#d <- ts(rnorm(12*20,0,.2), frequency=12, start=c(2000,1))
res <- cpt.mean(d, penalty = "Asymptotic", pen.value = 0.05, method = "AMOC",
test.stat = "Normal", class = FALSE)
# in documentation says that it results in NA if no changepoint but it often
# returns 240 as changepoint location which is the last point, so only include results unlike 240
if (res[1] != 240) fpr_mean <- c(fpr_mean, res[1])
}
cat(paste('False positive rate for AMOC mean is ', length(fpr_mean)/n)) # fpr is 0
fpr_mean
fpr_mean <- c()
for (i in 1:n) {
#d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
d <- annual_means(trend)
#d <- ts(rnorm(12*20,0,.2), frequency=12, start=c(2000,1))
res <- cpt.mean(d, penalty = "Asymptotic", pen.value = 0.05, method = "AMOC",
test.stat = "Normal", class = FALSE)
# in documentation says that it results in NA if no changepoint but it often
# returns 240 as changepoint location which is the last point, so only include results unlike 240
if (res[1] != 200) fpr_mean <- c(fpr_mean, res[1])
}
cat(paste('False positive rate for AMOC mean is ', length(fpr_mean)/n)) # fpr is 0
fpr_var <- c()
for (i in 1:n) {
#d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
d <- annual_means(trend)
#d <- ts(rnorm(12*20,0,.2), frequency=12, start=c(2000,1))
res <- cpt.var(d, penalty = "Asymptotic", pen.value = 0.05, method = "AMOC",
test.stat = "Normal", class = FALSE)
if (res[1] != 200) fpr_var <- c(fpr_var, res[1])
}
cat(paste('False positive rate for AMOC var is ', length(fpr_var)/n)) # fpr is 0.001
fpr_meanvar <- c()
for (i in 1:n) {
#d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
d <- annual_means(trend)
#d <- ts(rnorm(12*20,0,.2), frequency=12, start=c(2000,1))
res <- cpt.meanvar(d, penalty = "Asymptotic", pen.value = 0.05, method = "AMOC",
test.stat = "Normal", class = FALSE)
if (res[1] != 200) fpr_meanvar <- c(fpr_meanvar, res[1]) # 200 for annual means
#if (res[1] != 240) fpr_meanvar <- c(fpr_meanvar, res[1])
}
cat(paste('False positive rate for AMOC meanvar is ', length(fpr_meanvar)/n)) # fpr is 1
fpr_meanvar
trend <- rep(sin(2*pi*c(0:11)/12),20)
# Generalized fluctuation tests
#************
test_CPD_efp <- function(n, fun, trend, h = NULL){
p <- c()
for (i in 1:n) {
#d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
#d <- annual_means(trend)
d <- ts(rnorm(12*20,0,.2), frequency=12, start=c(2000,1))
temp <- efp(d ~ 1, d, type = fun, h = h, rescale = TRUE)
res <-  sctest(temp)
p <- c(p, res$p.value)
}
fpr <- as.double(sum(p<0.05))/as.double(n)
cat(paste('False positive rate for efp function ', fun,' is: ', fpr))
return(p)
}
n <- 5000
ec_cusum <- test_CPD_efp(n, 'Rec-CUSUM', trend) # annual mean: 0.0404, random data (no season):
ols_cusum <- test_CPD_efp(n, 'OLS-CUSUM', trend) # annual mean: 0.037, random data (no season):
score_cusum <- test_CPD_efp(n, 'Score-CUSUM', trend) # annual mean: 0.0364, random data (no season):
# tried different window sizes from 0.01 to 0.3 but always FPR = 0
rec_mosum <- test_CPD_efp(n, 'Rec-MOSUM', trend, h = 0.01) # annual mean: 0, random data (no season):
ols_mosum <- test_CPD_efp(n, 'OLS-MOSUM', trend, h = 0.01) # annual mean: 0, random data (no season):
# estimates based:
recur_estimates <- test_CPD_efp(n, 'RE', trend) # annual mean: 0.0406, random data:
mov_estimates <- test_CPD_efp(n, 'ME', trend, h = 0.05) # annual mean: 0.0192, random data:
# all result in FPR = 0...
# F Statistics (compares model fits for whole series vs. two segments; iterates over whole series as possible break points)
#************
p_sup <- c()
p_exp <- c()
p_ave <- c()
for (i in 1:n) {
#d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
#d <- annual_means(trend)
d <- ts(rnorm(12*20,0,.2), frequency=12, start=c(2000,1))
temp <- Fstats(d ~ 1)
res_sup <- sctest(temp, type = 'supF')
p_sup <- c(p_sup, res_sup$p.value)
res_exp <- sctest(temp, type = 'expF')
p_exp <- c(p_exp, res_exp$p.value)
res_ave <- sctest(temp, type = 'aveF')
p_ave <- c(p_ave, res_ave$p.value)
}
fpr_sup <- sum(p_sup<0.05)/n # is 0 # annual mean: 0.0514, random data (no season):
cat(paste('False positive rate for supF is: ', fpr_sup))
fpr_exp <- sum(p_exp<0.05)/n # is 0 # annual mean: 0.0562, random data (no season):
cat(paste('False positive rate for expF is: ', fpr_exp))
fpr_ave <- sum(p_ave<0.05)/n # is 0 # annual mean: 0.0544, random data (no season):
cat(paste('False positive rate for aveF is: ', fpr_ave))
# Pettitts (trend package) ----
#*********************************************************************
# non parametric pettitt test (also somehow based on wilcoxon rang thing)
library(trend)
p <- c()
for (i in 1:n) {
#d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
d <- annual_means(trend)
#d <- ts(rnorm(12*20,0,.2), frequency=12, start=c(2000,1))
res <- pettitt.test(d)
p <- c(p, res$p.value)
}
fpr <- sum(p<0.05)/n
cat(paste('False positive rate for pettitts test is: ', fpr)) # is 0
p <- c()
for (i in 1:n) {
#d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
#d <- annual_means(trend)
d <- ts(rnorm(12*20,0,.2), frequency=12, start=c(2000,1))
res <- pettitt.test(d)
p <- c(p, res$p.value)
}
fpr <- sum(p<0.05)/n
cat(paste('False positive rate for pettitts test is: ', fpr)) # is 0
# Generalized M-Fluctuation Tests
#************
p_LM <- c()
p_maxmo <- c()
for (i in 1:n) {
#d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
d <- annual_means(trend)
#d <- ts(rnorm(12*20,0,.2), frequency=12, start=c(2000,1))
temp <- gefp(d ~ 1, fit = lm)
res_LM <- sctest(temp, functional = supLM(0.05))
p_LM <- c(p_LM, res_LM$p.value)
res_maxmo <- sctest(temp, functional = maxMOSUM(width = 0.05))
p_maxmo <- c(p_maxmo, res_maxmo$p.value)
}
fpr_LM <- sum(p_LM<0.05)/n # is 0, annual means: , random data (no season)
cat(paste('False positive rate for supLM is: ', fpr_LM))
fpr_maxmo <- sum(p_maxmo<0.05)/n # is 0, annual means: , random data (no season)
cat(paste('False positive rate for maximum MOSUM is: ', fpr_maxmo))
# Generalized M-Fluctuation Tests
#************
p_LM <- c()
p_maxmo <- c()
for (i in 1:n) {
#d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
#d <- annual_means(trend)
d <- ts(rnorm(12*20,0,.2), frequency=12, start=c(2000,1))
temp <- gefp(d ~ 1, fit = lm)
res_LM <- sctest(temp, functional = supLM(0.05))
p_LM <- c(p_LM, res_LM$p.value)
res_maxmo <- sctest(temp, functional = maxMOSUM(width = 0.05))
p_maxmo <- c(p_maxmo, res_maxmo$p.value)
}
fpr_LM <- sum(p_LM<0.05)/n # is 0, annual means: 0.0426, random data (no season):
cat(paste('False positive rate for supLM is: ', fpr_LM))
fpr_maxmo <- sum(p_maxmo<0.05)/n # is 0, annual means: 0.0236, random data (no season):
cat(paste('False positive rate for maximum MOSUM is: ', fpr_maxmo))
# Generalized fluctuation tests
#************
test_CPD_efp <- function(n, fun, trend, h = NULL){
p <- c()
for (i in 1:n) {
#d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
#d <- annual_means(trend)
d <- ts(rnorm(12*20,0,.2), frequency=12, start=c(2000,1))
temp <- efp(d ~ 1, d, type = fun, h = h, rescale = TRUE)
res <-  sctest(temp)
p <- c(p, res$p.value)
}
fpr <- as.double(sum(p<0.05))/as.double(n)
cat(paste('False positive rate for efp function ', fun,' is: ', fpr))
return(p)
}
n <- 10000
rec_cusum <- test_CPD_efp(n, 'Rec-CUSUM', trend) # annual mean: 0.0404, random data (no season): 0.0472
ols_cusum <- test_CPD_efp(n, 'OLS-CUSUM', trend) # annual mean: 0.037, random data (no season): 0.0426
# Generalized fluctuation tests
#************
test_CPD_efp <- function(n, fun, trend, h = NULL){
p <- c()
for (i in 1:n) {
#d <- ts(rnorm(12*20,0,.2)+trend, frequency=12, start=c(2000,1))
d <- annual_means(trend)
#d <- ts(rnorm(12*20,0,.2), frequency=12, start=c(2000,1))
temp <- efp(d ~ 1, d, type = fun, h = h, rescale = TRUE)
res <-  sctest(temp)
p <- c(p, res$p.value)
}
fpr <- as.double(sum(p<0.05))/as.double(n)
cat(paste('False positive rate for efp function ', fun,' is: ', fpr))
return(p)
}
n <- 10000
# residual based:
rec_cusum <- test_CPD_efp(n, 'Rec-CUSUM', trend) # annual mean: 0.0404, ; random data (no season): 0.0472, 0.0426
ols_cusum <- test_CPD_efp(n, 'OLS-CUSUM', trend) # annual mean: 0.037, ; random data (no season): 0.0426, 0.0396
