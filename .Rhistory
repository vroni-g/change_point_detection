perm_results <- perm_dist(data=data, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
perm_results$original_wt
# perm_dist performs obtains the permutation distribution for maxT, STCS and others specified in the respective functions
# perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
#                          alpha_global=alpha_global, null_distribution=null_distribution,
#                          seed=seed, block_size=block_size, verbose=verbose)
#*******************************************************************************
# test new perm_dist
#*******************************************************************************
nperm = 30
# perm_dist performs obtains the permutation distribution for maxT, STCS and others specified in the respective functions
# perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
#                          alpha_global=alpha_global, null_distribution=null_distribution,
#                          seed=seed, block_size=block_size, verbose=verbose)
#*******************************************************************************
# test new perm_dist
#*******************************************************************************
nperm = 50
# perm_results <- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
#                          alpha_global=alpha_global, null_distribution=null_distribution,
#                          seed=seed, block_size=block_size, verbose=verbose)
perm_results <- perm_dist(data=data, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
out<- list()
tmp<- get_stcs(data=perm_results$original_results, alpha_local=alpha_local, null_distribution=null_distribution)
stcs_thr<- quantile(perm_results$stcs, 1-alpha_global, na.rm = TRUE)
wh_cluster<- which(tmp$clusters$cluster.count > stcs_thr)
#wh_cluster_sel<- tmp$clusters$clusters %in% wh_cluster
out$stcs<- apply(tmp$clusters$clusters, 1:2, function(x, wh_cluster) x %in% wh_cluster, wh_cluster)
# combining function of stcs and stcs_maxT_all
wt_thr <- quantile(perm_results$wt, 1-alpha_global, na.rm = TRUE)
wh_cluster_wt <- which(perm_results$original_wt > wt_thr)
out$Wt<- apply(tmp$clusters$clusters, 1:2, function(x, wh_cluster_wt) x %in% wh_cluster_wt, wh_cluster_wt)
wt_thr
perm_results$original_wt
perm_results$wt
View(perm_results)
load_all()
# perm_dist performs obtains the permutation distribution for maxT, STCS and others specified in the respective functions
# perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
#                          alpha_global=alpha_global, null_distribution=null_distribution,
#                          seed=seed, block_size=block_size, verbose=verbose)
#*******************************************************************************
# test new perm_dist
#*******************************************************************************
nperm = 3
# perm_results <- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
#                          alpha_global=alpha_global, null_distribution=null_distribution,
#                          seed=seed, block_size=block_size, verbose=verbose)
perm_results <- perm_dist(data=data, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
View(perm_results)
perm_results$original_wt
# perm_dist performs obtains the permutation distribution for maxT, STCS and others specified in the respective functions
# perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
#                          alpha_global=alpha_global, null_distribution=null_distribution,
#                          seed=seed, block_size=block_size, verbose=verbose)
#*******************************************************************************
# test new perm_dist
#*******************************************************************************
nperm = 10
# perm_results <- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
#                          alpha_global=alpha_global, null_distribution=null_distribution,
#                          seed=seed, block_size=block_size, verbose=verbose)
perm_results <- perm_dist(data=data, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
View(perm_results)
# perm_dist performs obtains the permutation distribution for maxT, STCS and others specified in the respective functions
# perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
#                          alpha_global=alpha_global, null_distribution=null_distribution,
#                          seed=seed, block_size=block_size, verbose=verbose)
#*******************************************************************************
# test new perm_dist
#*******************************************************************************
nperm = 40
# perm_results <- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
#                          alpha_global=alpha_global, null_distribution=null_distribution,
#                          seed=seed, block_size=block_size, verbose=verbose)
perm_results <- perm_dist(data=data, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
View(perm_results)
perm_results$original_wt
View(perm_results)
stcs_thr<- quantile(perm_results$stcs, 1-alpha_global, na.rm = TRUE)
tmp<- get_stcs(data=perm_results$original_results, alpha_local=alpha_local, null_distribution=null_distribution)
View(tmp)
load_all()
# perm_dist obtains the permutation distribution for maxT, STCS and others specified in the respective functions
# perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
#                          alpha_global=alpha_global, null_distribution=null_distribution,
#                          seed=seed, block_size=block_size, verbose=verbose)
#*******************************************************************************
# test new perm_dist
#*******************************************************************************
nperm = 12
# perm_results <- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
#                          alpha_global=alpha_global, null_distribution=null_distribution,
#                          seed=seed, block_size=block_size, verbose=verbose)
perm_results <- perm_dist(data=data, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
View(perm_results)
load_all()
# perm_dist obtains the permutation distribution for maxT, STCS and others specified in the respective functions
# perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
#                          alpha_global=alpha_global, null_distribution=null_distribution,
#                          seed=seed, block_size=block_size, verbose=verbose)
#*******************************************************************************
# test new perm_dist
#*******************************************************************************
nperm = 30
# perm_results <- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
#                          alpha_global=alpha_global, null_distribution=null_distribution,
#                          seed=seed, block_size=block_size, verbose=verbose)
perm_results <- perm_dist(data=data, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
out<- list()
tmp<- get_stcs(data=perm_results$original_results, alpha_local=alpha_local, null_distribution=null_distribution)
stcs_thr<- quantile(perm_results$stcs, 1-alpha_global, na.rm = TRUE)
wh_cluster<- which(tmp$clusters$cluster.count > stcs_thr)
#wh_cluster_sel<- tmp$clusters$clusters %in% wh_cluster
out$stcs<- apply(tmp$clusters$clusters, 1:2, function(x, wh_cluster) x %in% wh_cluster, wh_cluster)
# combining function of stcs and stcs_maxT_all
wt_thr <- quantile(perm_results$wt, 1-alpha_global, na.rm = TRUE)
wh_cluster_wt <- which(perm_results$original_wt > wt_thr)
out$Wt<- apply(tmp$clusters$clusters, 1:2, function(x, wh_cluster_wt) x %in% wh_cluster_wt, wh_cluster_wt)
stcs_thr
tmp$stcs
perm_results$stcs
perm_results$wt
wt_thr
perm_results$original_wt
tmp$clusters$cluster.count
stcs_thr<- quantile(perm_results$stcs, 1-alpha_global, na.rm = TRUE)
dis_maxT_all <- ecdf(perm_results$stcs_maxT_all)
View(perm_results)
load_all()
# perm_dist obtains the permutation distribution for maxT, STCS and others specified in the respective functions
# perm_results<- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
#                          alpha_global=alpha_global, null_distribution=null_distribution,
#                          seed=seed, block_size=block_size, verbose=verbose)
#*******************************************************************************
# test new perm_dist
#*******************************************************************************
nperm = 30
load_all()
# perm_results <- perm_dist(data=data_detrend, fx=fx, nperm=nperm, alpha_local=alpha_local,
#                          alpha_global=alpha_global, null_distribution=null_distribution,
#                          seed=seed, block_size=block_size, verbose=verbose)
perm_results <- perm_dist(data=data, fx=fx, nperm=nperm, alpha_local=alpha_local,
alpha_global=alpha_global, null_distribution=null_distribution,
seed=seed, block_size=block_size, verbose=verbose)
out<- list()
tmp<- get_stcs(data=perm_results$original_results, alpha_local=alpha_local, null_distribution=null_distribution)
stcs_thr<- quantile(perm_results$stcs, 1-alpha_global, na.rm = TRUE)
wh_cluster<- which(tmp$clusters$cluster.count > stcs_thr)
#wh_cluster_sel<- tmp$clusters$clusters %in% wh_cluster
out$stcs<- apply(tmp$clusters$clusters, 1:2, function(x, wh_cluster) x %in% wh_cluster, wh_cluster)
# combining function of stcs and stcs_maxT_all
wt_thr <- quantile(perm_results$wt, 1-alpha_global, na.rm = TRUE)
wh_cluster_wt <- which(perm_results$original_wt > wt_thr)
out$Wt<- apply(tmp$clusters$clusters, 1:2, function(x, wh_cluster_wt) x %in% wh_cluster_wt, wh_cluster_wt)
View(out)
perm_results$original_wt
wt_thr
tmp$clusters$cluster.count
dis_maxT_all <- ecdf(perm_results$stcs_maxT_all)
dis_stcs<- ecdf(perm_results$stcs)
wt <- vector(length = nperm)
clust_perm <- perm_results$original_results
wt <- vector(length = length(clust_perm$cluster.count))
clust_perm <- tmp
wt <- vector(length = length(clust_perm$cluster.count))
for(j in 1:length(clust_perm$cluster.count)){
# retrieve p-values for each cluster
p_maxT_all <- 1 - dis_maxT_all(clust_perm$cluster.max[j])
p_stcs <- 1 - dis_stcs(clust_perm$cluster.count[j])
# combine in new test statistic
w <- 1 - min(log(p_maxT_all), log(p_stcs))
wt[j] <- w
}
wt
wt <- vector(length = length(clust_perm$cluster.count))
length(wt)
clust_perm <- tmp
wt <- vector(length = length(clust_perm$cluster.count))
View(clust_perm)
wt <- vector(length = length(clust_perm$clusters$cluster.count))
wt <- vector(length = length(clust_perm$clusters$cluster.count))
for(j in 1:length(clust_perm$clusters$cluster.count)){
# retrieve p-values for each cluster
p_maxT_all <- 1 - dis_maxT_all(clust_perm$cluster.max[j])
p_stcs <- 1 - dis_stcs(clust_perm$cluster.count[j])
# combine in new test statistic
w <- 1 - min(log(p_maxT_all), log(p_stcs))
wt[j] <- w
}
wt
tmp<- get_stcs(data=perm_results$original_results, alpha_local=alpha_local, null_distribution=null_distribution)
dis_maxT_all <- ecdf(perm_results$stcs_maxT_all)
dis_stcs<- ecdf(perm_results$stcs)
wt <- vector(length = length(clust_perm$clusters$cluster.count))
for(j in 1:length(clust_perm$clusters$cluster.count)){
# retrieve p-values for each cluster
p_maxT_all <- 1 - dis_maxT_all(clust_perm$clusters$cluster.max[j])
p_stcs <- 1 - dis_stcs(clust_perm$clusters$cluster.count[j])
# combine in new test statistic
w <- 1 - min(log(p_maxT_all), log(p_stcs))
wt[j] <- w
}
wt
#for(j in 1:length(clust_perm$clusters$cluster.count)){
# retrieve p-values for each cluster
j <- 4
p_maxT_all <- 1 - dis_maxT_all(clust_perm$clusters$cluster.max[j])
p_stcs <- 1 - dis_stcs(clust_perm$clusters$cluster.count[j])
log(0.0000000000001)
log(0.000000000000001)
log(0.000000001)
usethis::edit_r_profile('project')
install.packages('devtools')
install.packages("devtools")
install.packages('devtools')
citation()
citation('strucchange')
print(<citation>, bibtex=TRUE)
print(strucchange, bibtex=TRUE)
print(citation('strucchange'), bibtex=TRUE)
res <- readRDS('testing/LAI_Wtadjust_nperm_100.rds')
View(res)
res$maxT
res$stcs
res$wt
res$original_wt
res$stcs_maxT
# SCRIPT FOR TESTING FUNCTIONS
library("devtools")
load_all()
# ADDITIONAL NEEDED LIBRARIES
library(tidyverse) # for pipe: %>%
library(fields) # for nicer basic plotting: image.plot
data_lai_res <- readRDS("testing/lai_res_nperm_100.rds")
data_lai_res <- readRDS("testing/LAI_Wtadjust_nperm_100.rds")
data_lai_res <- readRDS("testing/lai_res_nperm_100.rds")
View(data_lai_res)
results_df<- do.call(rbind, data_lai_res$stcs_mvt[[1]]) %>% as.data.frame
results_df$results_length<- lapply(data_lai_res$stcs_mvt[[1]], function(x) x$results %>% length) %>% do.call(c, .)
results_df$results<- NULL
results_df$id<- 1
for(i in 2:nperm){
tmp<- do.call(rbind, data_lai_res$stcs_mvt[[i]]) %>% as.data.frame
tmp$results_length<- lapply(data_lai_res$stcs_mvt[[i]], function(x) x$results %>% length) %>% do.call(c, .)
tmp$results<- NULL
tmp$id<- i
results_df<- rbind(results_df, tmp)
}
# }
#
# data_lai<- tibble_list_to_3d_array(data)
# rm(data)
#
# data_lai_res<- perm_dist(data=data_lai, fx=fx, nperm=100, alpha_local=alpha_local,
#           alpha_global=alpha_global, null_distribution=null_distribution,
#           seed=seed, block_size=block_size, verbose=verbose)
# rm(data)
# saveRDS(data_lai_res, file = "testing/lai_res_nperm_1000.rds")
nperm <- 100
for(i in 2:nperm){
tmp<- do.call(rbind, data_lai_res$stcs_mvt[[i]]) %>% as.data.frame
tmp$results_length<- lapply(data_lai_res$stcs_mvt[[i]], function(x) x$results %>% length) %>% do.call(c, .)
tmp$results<- NULL
tmp$id<- i
results_df<- rbind(results_df, tmp)
}
results_df<- unnest(results_df)
View(results_df)
library(ggalt)
# all cluster results
results_encircle<- results_df %>% filter(id==nperm)
results_encircle %>% filter(abs(maxT) >= quantile(abs(data_lai_res$maxT), probs = .975) | results_length >= quantile(results_length, probs=.975))
results_df %>%
ggplot(aes(x = results_length, y = abs(maxT), color = (id-25))) +
geom_point() +
#xlim(c(-1000,12000)) +
#ylim(c(-1, 8)) +
scale_fill_distiller(palette='Spectral') +
geom_point(aes(x = results_length, y = abs(maxT)),
data = results_encircle,
color = "red",
size = 2)+
geom_encircle(aes(x = results_length, y = abs(maxT)),
data = results_encircle,
color = "red",
size = 2,
expand = .01) +
theme_bw()
library(ggalt)
install.packages('ggalt')
library(ggalt)
results_df %>%
ggplot(aes(x = results_length, y = abs(maxT), color = (id-25))) +
geom_point() +
#xlim(c(-1000,12000)) +
#ylim(c(-1, 8)) +
scale_fill_distiller(palette='Spectral') +
geom_point(aes(x = results_length, y = abs(maxT)),
data = results_encircle,
color = "red",
size = 2)+
geom_encircle(aes(x = results_length, y = abs(maxT)),
data = results_encircle,
color = "red",
size = 2,
expand = .01) +
theme_bw()
# filtered by maximum
results_df %>%
group_by(id) %>%
filter(results_length==max(results_length)) %>%
ggplot(aes(x = results_length, y = abs(maxT), color = (id-25))) +
geom_point() +
# xlim(c(0,1000)) +
scale_fill_distiller(palette='Spectral') +
geom_point(aes(x = results_length, y = abs(maxT)),
data = results_encircle %>% filter(results_length==max(results_length)) ,
color = "red",
size = 2)+
geom_point(aes(x = results_length, y = abs(maxT)),
data = results_encircle, #%>% filter(results_length==max(results_length)),
color = "red",
size = 2) +
theme_bw() +
geom_hline(yintercept = quantile(abs(data_lai_res$maxT), probs = .975)) +
geom_vline(xintercept = quantile(abs(data_lai_res$stcs), probs = .975)) +
geom_vline(xintercept = quantile(abs(data_lai_res$stcs), probs = .95), col = "green") +
geom_vline(xintercept = quantile(abs(data_lai_res$stcs), probs = .9), col = "blue") +
geom_hline(yintercept = quantile(abs(data_lai_res$maxT), probs = .95), col = "green") +
geom_hline(yintercept = quantile(abs(data_lai_res$maxT), probs = .9), col = "blue")
View(data_lai_res)
View(results_df)
length(results_df)
nrow(results_df)
results_df %>%
ggplot(aes(x = results_length, y = abs(maxT), color = (id-25))) +
geom_point() +
#xlim(c(-1000,12000)) +
#ylim(c(-1, 8)) +
scale_fill_distiller(palette='Spectral') +
geom_point(aes(x = results_length, y = abs(maxT)),
data = results_encircle,
color = "red",
size = 2)+
geom_encircle(aes(x = results_length, y = abs(maxT)),
data = results_encircle,
color = "red",
size = 2,
expand = .01) +
theme_bw()
# filtered by maximum
results_df %>%
group_by(id) %>%
filter(results_length==max(results_length)) %>%
ggplot(aes(x = results_length, y = abs(maxT), color = (id-25))) +
geom_point() +
# xlim(c(0,1000)) +
scale_fill_distiller(palette='Spectral') +
geom_point(aes(x = results_length, y = abs(maxT)),
data = results_encircle %>% filter(results_length==max(results_length)) ,
color = "red",
size = 2)+
geom_point(aes(x = results_length, y = abs(maxT)),
data = results_encircle, #%>% filter(results_length==max(results_length)),
color = "red",
size = 2) +
theme_bw() +
geom_hline(yintercept = quantile(abs(data_lai_res$maxT), probs = .975)) +
geom_vline(xintercept = quantile(abs(data_lai_res$stcs), probs = .975)) +
geom_vline(xintercept = quantile(abs(data_lai_res$stcs), probs = .95), col = "green") +
geom_vline(xintercept = quantile(abs(data_lai_res$stcs), probs = .9), col = "blue") +
geom_hline(yintercept = quantile(abs(data_lai_res$maxT), probs = .95), col = "green") +
geom_hline(yintercept = quantile(abs(data_lai_res$maxT), probs = .9), col = "blue")
#************************************************************
# Check clustersizes of significant clusters with LAI data
#************************************************************
#perm_results <- readRDS("LAI_Wtadjust_nperm_3.rds")
res <- readRDS("testing/LAI_Wtadjust_nperm_100.rds")
View(res)
#************************************************************
# Check clustersizes of significant clusters with LAI data
#************************************************************
#perm_results <- readRDS("LAI_Wtadjust_nperm_3.rds")
res <- readRDS("testing/LAI_Wtadjust_nperm_100.rds")
View(res)
View(res)
#************************************************************
# Check clustersizes of significant clusters with LAI data
#************************************************************
#perm_results <- readRDS("LAI_Wtadjust_nperm_3.rds")
res <- readRDS("testing/LAI_Wtadjust_nperm_100.rds")
View(res)
library(tidyverse)
#************************************************************
# Check clustersizes of significant clusters with LAI data
#************************************************************
orig <- readRDS("testing/LAI_Wtadjust_nperm_2.rds")
# in former code the number and sizes of cluster of original data were not returned
# changed this and executed again with only 2 permutations and retrieved cluster sizes
res <- readRDS("testing/LAI_Wtadjust_nperm_100.rds")
clust_size <- orig$original_data$cluster.count
wt_vals <- res$original_wt
res_df <- data.frame(clust_size,wt_vals)
names(res_df) <- c("cluster_size","wt_values")
res_df %>%
ggplot(aes(x = cluster_size, y = wt_vals)) +
labs(title = "Suprathreshold Cluster of Mann Kendall's Trend Test (alpha = 0.05)") +
xlab('Cluster Size') +
ylab('Tippet combining function value') +
geom_point(color = "steelblue3", size = 2, alpha = 0.6) +
theme_bw() +
geom_hline(yintercept = quantile(res$wt, probs = .95),col = "red") +
geom_text(aes(5000,quantile(res$wt, probs = .95),label = "alpha = 0.05", size= 0.5)) +
geom_vline(xintercept = quantile(res$stcs, probs = .95),col = "red") +
geom_vline(xintercept = quantile(res$stcs, probs = .975), col = "coral1", linetype="dotted") +
geom_hline(yintercept = quantile(res$wt, probs = .975), col = "coral1", linetype="dotted")
res_df %>%
ggplot(aes(x = cluster_size, y = wt_vals)) +
labs(title = "Suprathreshold Cluster of Mann Kendall's Trend Test (alpha = 0.05)") +
xlab('Cluster Size') +
ylab('Tippet combining function value') +
geom_point(color = "steelblue3", size = 2, alpha = 0.6) +
theme_bw() +
geom_hline(yintercept = quantile(res$wt, probs = .95),col = "red") +
geom_text(aes(5000,quantile(res$wt, probs = .95),label = "alpha = 0.05", size= 0.5)) +
geom_vline(xintercept = quantile(res$stcs, probs = .95),col = "red") +
geom_vline(xintercept = quantile(res$stcs, probs = .975), col = "coral1", linetype="dotted") +
geom_hline(yintercept = quantile(res$wt, probs = .975), col = "coral1", linetype="dotted")
library(tidyverse)
res <- readRDS("testing/LAI_Wtadjust_nperm_1000.rds")
View(res)
res$maxT
res$stcs
res$stcs_maxT
res$wt
res$original_wt
res_df <- data.frame(res$original_data$cluster.count, res$original_wt)
names(res_df) <- c("cluster_size","wt_values")
View(res_df)
# values declared significant by tippet
tipp_95 <- res_df %>%
dplyr::filter(wt_vals >= quantile(res$wt, probs = .95))
clust_size <- res$original_data$cluster.count
wt_vals <- res$original_wt
res_df <- data.frame(clust_size,wt_vals)
names(res_df) <- c("cluster_size","wt_values")
# values declared significant by tippet
tipp_95 <- res_df %>%
dplyr::filter(wt_vals >= quantile(res$wt, probs = .95))
tipp_975 <- res_df %>%
dplyr::filter(wt_vals >= quantile(res$wt, probs = .975))
# values declared significant by stcs
stcs_95 <- res_df %>%
dplyr::filter(cluster_size >= quantile(res$stcs, probs = .95))
stcs_975 <- res_df %>%
dplyr::filter(cluster_size >= quantile(res$stcs, probs = .975))
# values declared significant by tippet but not by stcs
tip_small_95 <- res_df %>%
dplyr::filter(wt_vals >= quantile(res$wt, probs = .95) & cluster_size < quantile(res$stcs, probs = .95))
tip_small_975 <- res_df %>%
dplyr::filter(wt_vals >= quantile(res$wt, probs = .975) & cluster_size < quantile(res$stcs, probs = .975))
res_df %>%
ggplot(aes(x = cluster_size, y = wt_vals)) +
labs(title = "Suprathreshold Cluster of Mann Kendall's Trend Test (alpha = 0.05)") +
xlab('Suprathreshold Cluster Size') +
ylab('Tippet combining function value') +
geom_point(color = "steelblue3", size = 2, alpha = 0.6) +
theme_bw() +
geom_hline(yintercept = quantile(res$wt, probs = .95),col = "red") +
geom_hline(yintercept = quantile(res$wt, probs = .975), col = "goldenrod1") +
geom_vline(aes(xintercept = quantile(res$stcs, probs = .95), colour = "alpha = 0.05")) +
geom_vline(aes(xintercept = quantile(res$stcs, probs = .975), colour = "alpha = 0.025")) +
scale_colour_manual("MaxDistribution Threshold",
values = c("alpha = 0.05"="red", "alpha = 0.025"="goldenrod1")
) +
geom_rect(mapping = aes(xmin=22500, xmax=42000, ymin=0.8, ymax=2), fill = NA, color = "black", show.legend = FALSE) +
annotate("text", x=32000, y=1.79, label= "For maxDistribution alpha = 0.05:", size = 3, fontface = "bold") +
annotate("text", x=32000, y=1.59, label= paste0("Significant Cluster STCS: ", nrow(stcs_95) ), size = 3) +
annotate("text", x=32000, y=1.44, label= paste0("Significant Cluster Tippet: ", nrow(tipp_95)), size = 3) +
annotate("text", x=32000, y=1.29, label= paste0("Significant Cluster Tippet but not STCS: ", nrow(tip_small_95)), size = 3) +
annotate("text", x=32000, y=1.09, label= paste0("Total number of Cluster: ", nrow(res_df)), size = 3)
res_df %>%
ggplot(aes(x = cluster_size, y = wt_vals)) +
labs(title = "Suprathreshold Cluster of Mann Kendall's Trend Test (alpha = 0.05)") +
xlab('Suprathreshold Cluster Size') +
ylab('Tippet combining function value') +
geom_point(color = "steelblue3", size = 2, alpha = 0.6) +
theme_bw() +
geom_hline(yintercept = quantile(res$wt, probs = .95),col = "red") +
geom_hline(yintercept = quantile(res$wt, probs = .975), col = "goldenrod1") +
geom_vline(aes(xintercept = quantile(res$stcs, probs = .95), colour = "alpha = 0.05")) +
geom_vline(aes(xintercept = quantile(res$stcs, probs = .975), colour = "alpha = 0.025")) +
scale_colour_manual("MaxDistribution Threshold",
values = c("alpha = 0.05"="red", "alpha = 0.025"="goldenrod1")
) #+
load("/home/jose/LAI/data/CHEN_RANGA/AVHRR/yearly_mean/lai_data.RData")
load("hpc_vroni/home/jose/LAI/data/CHEN_RANGA/AVHRR/yearly_mean/lai_data.RData")
